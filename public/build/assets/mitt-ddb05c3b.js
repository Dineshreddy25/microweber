function ki(e,t){const n=Object.create(null),r=e.split(",");for(let s=0;s<r.length;s++)n[r[s]]=!0;return t?s=>!!n[s.toLowerCase()]:s=>!!n[s]}const Pe={},Xt=[],ot=()=>{},El=()=>!1,Sl=/^on[^a-z]/,Jr=e=>Sl.test(e),Fi=e=>e.startsWith("onUpdate:"),Be=Object.assign,Xr=(e,t)=>{const n=e.indexOf(t);n>-1&&e.splice(n,1)},Pl=Object.prototype.hasOwnProperty,he=(e,t)=>Pl.call(e,t),Q=Array.isArray,Zt=e=>tr(e)==="[object Map]",Li=e=>tr(e)==="[object Set]",oe=e=>typeof e=="function",He=e=>typeof e=="string",Zr=e=>typeof e=="symbol",Te=e=>e!==null&&typeof e=="object",Ii=e=>Te(e)&&oe(e.then)&&oe(e.catch),Di=Object.prototype.toString,tr=e=>Di.call(e),Tl=e=>tr(e).slice(8,-1),Ui=e=>tr(e)==="[object Object]",Qr=e=>He(e)&&e!=="NaN"&&e[0]!=="-"&&""+parseInt(e,10)===e,$n=ki(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),nr=e=>{const t=Object.create(null);return n=>t[n]||(t[n]=e(n))},Al=/-(\w)/g,dt=nr(e=>e.replace(Al,(t,n)=>n?n.toUpperCase():"")),Nl=/\B([A-Z])/g,rr=nr(e=>e.replace(Nl,"-$1").toLowerCase()),Gr=nr(e=>e.charAt(0).toUpperCase()+e.slice(1)),Bn=nr(e=>e?`on${Gr(e)}`:""),bn=(e,t)=>!Object.is(e,t),Ar=(e,t)=>{for(let n=0;n<e.length;n++)e[n](t)},Wn=(e,t,n)=>{Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:n})},Ml=e=>{const t=parseFloat(e);return isNaN(t)?e:t};let Hs;const Ir=()=>Hs||(Hs=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{});function Tn(e){if(Q(e)){const t={};for(let n=0;n<e.length;n++){const r=e[n],s=He(r)?Ll(r):Tn(r);if(s)for(const i in s)t[i]=s[i]}return t}else{if(He(e))return e;if(Te(e))return e}}const Ol=/;(?![^(]*\))/g,kl=/:([^]+)/,Fl=/\/\*[^]*?\*\//g;function Ll(e){const t={};return e.replace(Fl,"").split(Ol).forEach(n=>{if(n){const r=n.split(kl);r.length>1&&(t[r[0].trim()]=r[1].trim())}}),t}function sr(e){let t="";if(He(e))t=e;else if(Q(e))for(let n=0;n<e.length;n++){const r=sr(e[n]);r&&(t+=r+" ")}else if(Te(e))for(const n in e)e[n]&&(t+=n+" ");return t.trim()}function ku(e){if(!e)return null;let{class:t,style:n}=e;return t&&!He(t)&&(e.class=sr(t)),n&&(e.style=Tn(n)),e}const Il=e=>He(e)?e:e==null?"":Q(e)||Te(e)&&(e.toString===Di||!oe(e.toString))?JSON.stringify(e,Vi,2):String(e),Vi=(e,t)=>t&&t.__v_isRef?Vi(e,t.value):Zt(t)?{[`Map(${t.size})`]:[...t.entries()].reduce((n,[r,s])=>(n[`${r} =>`]=s,n),{})}:Li(t)?{[`Set(${t.size})`]:[...t.values()]}:Te(t)&&!Q(t)&&!Ui(t)?String(t):t;let Qe;class ji{constructor(t=!1){this.detached=t,this._active=!0,this.effects=[],this.cleanups=[],this.parent=Qe,!t&&Qe&&(this.index=(Qe.scopes||(Qe.scopes=[])).push(this)-1)}get active(){return this._active}run(t){if(this._active){const n=Qe;try{return Qe=this,t()}finally{Qe=n}}}on(){Qe=this}off(){Qe=this.parent}stop(t){if(this._active){let n,r;for(n=0,r=this.effects.length;n<r;n++)this.effects[n].stop();for(n=0,r=this.cleanups.length;n<r;n++)this.cleanups[n]();if(this.scopes)for(n=0,r=this.scopes.length;n<r;n++)this.scopes[n].stop(!0);if(!this.detached&&this.parent&&!t){const s=this.parent.scopes.pop();s&&s!==this&&(this.parent.scopes[this.index]=s,s.index=this.index)}this.parent=void 0,this._active=!1}}}function Fu(e){return new ji(e)}function Dl(e,t=Qe){t&&t.active&&t.effects.push(e)}function Ul(){return Qe}function Lu(e){Qe&&Qe.cleanups.push(e)}const es=e=>{const t=new Set(e);return t.w=0,t.n=0,t},Ri=e=>(e.w&Ot)>0,Hi=e=>(e.n&Ot)>0,Vl=({deps:e})=>{if(e.length)for(let t=0;t<e.length;t++)e[t].w|=Ot},jl=e=>{const{deps:t}=e;if(t.length){let n=0;for(let r=0;r<t.length;r++){const s=t[r];Ri(s)&&!Hi(s)?s.delete(e):t[n++]=s,s.w&=~Ot,s.n&=~Ot}t.length=n}},Yn=new WeakMap;let dn=0,Ot=1;const Dr=30;let st;const Bt=Symbol(""),Ur=Symbol("");class ts{constructor(t,n=null,r){this.fn=t,this.scheduler=n,this.active=!0,this.deps=[],this.parent=void 0,Dl(this,r)}run(){if(!this.active)return this.fn();let t=st,n=Nt;for(;t;){if(t===this)return;t=t.parent}try{return this.parent=st,st=this,Nt=!0,Ot=1<<++dn,dn<=Dr?Vl(this):$s(this),this.fn()}finally{dn<=Dr&&jl(this),Ot=1<<--dn,st=this.parent,Nt=n,this.parent=void 0,this.deferStop&&this.stop()}}stop(){st===this?this.deferStop=!0:this.active&&($s(this),this.onStop&&this.onStop(),this.active=!1)}}function $s(e){const{deps:t}=e;if(t.length){for(let n=0;n<t.length;n++)t[n].delete(e);t.length=0}}let Nt=!0;const $i=[];function rn(){$i.push(Nt),Nt=!1}function sn(){const e=$i.pop();Nt=e===void 0?!0:e}function Ze(e,t,n){if(Nt&&st){let r=Yn.get(e);r||Yn.set(e,r=new Map);let s=r.get(n);s||r.set(n,s=es()),Bi(s)}}function Bi(e,t){let n=!1;dn<=Dr?Hi(e)||(e.n|=Ot,n=!Ri(e)):n=!e.has(st),n&&(e.add(st),st.deps.push(e))}function _t(e,t,n,r,s,i){const l=Yn.get(e);if(!l)return;let a=[];if(t==="clear")a=[...l.values()];else if(n==="length"&&Q(e)){const f=Number(r);l.forEach((p,m)=>{(m==="length"||m>=f)&&a.push(p)})}else switch(n!==void 0&&a.push(l.get(n)),t){case"add":Q(e)?Qr(n)&&a.push(l.get("length")):(a.push(l.get(Bt)),Zt(e)&&a.push(l.get(Ur)));break;case"delete":Q(e)||(a.push(l.get(Bt)),Zt(e)&&a.push(l.get(Ur)));break;case"set":Zt(e)&&a.push(l.get(Bt));break}if(a.length===1)a[0]&&Vr(a[0]);else{const f=[];for(const p of a)p&&f.push(...p);Vr(es(f))}}function Vr(e,t){const n=Q(e)?e:[...e];for(const r of n)r.computed&&Bs(r);for(const r of n)r.computed||Bs(r)}function Bs(e,t){(e!==st||e.allowRecurse)&&(e.scheduler?e.scheduler():e.run())}function Rl(e,t){var n;return(n=Yn.get(e))==null?void 0:n.get(t)}const Hl=ki("__proto__,__v_isRef,__isVue"),zi=new Set(Object.getOwnPropertyNames(Symbol).filter(e=>e!=="arguments"&&e!=="caller").map(e=>Symbol[e]).filter(Zr)),$l=ns(),Bl=ns(!1,!0),zl=ns(!0),zs=Kl();function Kl(){const e={};return["includes","indexOf","lastIndexOf"].forEach(t=>{e[t]=function(...n){const r=pe(this);for(let i=0,l=this.length;i<l;i++)Ze(r,"get",i+"");const s=r[t](...n);return s===-1||s===!1?r[t](...n.map(pe)):s}}),["push","pop","shift","unshift","splice"].forEach(t=>{e[t]=function(...n){rn();const r=pe(this)[t].apply(this,n);return sn(),r}}),e}function ql(e){const t=pe(this);return Ze(t,"has",e),t.hasOwnProperty(e)}function ns(e=!1,t=!1){return function(r,s,i){if(s==="__v_isReactive")return!e;if(s==="__v_isReadonly")return e;if(s==="__v_isShallow")return t;if(s==="__v_raw"&&i===(e?t?aa:Ji:t?Yi:Wi).get(r))return r;const l=Q(r);if(!e){if(l&&he(zs,s))return Reflect.get(zs,s,i);if(s==="hasOwnProperty")return ql}const a=Reflect.get(r,s,i);return(Zr(s)?zi.has(s):Hl(s))||(e||Ze(r,"get",s),t)?a:Re(a)?l&&Qr(s)?a:a.value:Te(a)?e?Xi(a):is(a):a}}const Wl=Ki(),Yl=Ki(!0);function Ki(e=!1){return function(n,r,s,i){let l=n[r];if(en(l)&&Re(l)&&!Re(s))return!1;if(!e&&(!Jn(s)&&!en(s)&&(l=pe(l),s=pe(s)),!Q(n)&&Re(l)&&!Re(s)))return l.value=s,!0;const a=Q(n)&&Qr(r)?Number(r)<n.length:he(n,r),f=Reflect.set(n,r,s,i);return n===pe(i)&&(a?bn(s,l)&&_t(n,"set",r,s):_t(n,"add",r,s)),f}}function Jl(e,t){const n=he(e,t);e[t];const r=Reflect.deleteProperty(e,t);return r&&n&&_t(e,"delete",t,void 0),r}function Xl(e,t){const n=Reflect.has(e,t);return(!Zr(t)||!zi.has(t))&&Ze(e,"has",t),n}function Zl(e){return Ze(e,"iterate",Q(e)?"length":Bt),Reflect.ownKeys(e)}const qi={get:$l,set:Wl,deleteProperty:Jl,has:Xl,ownKeys:Zl},Ql={get:zl,set(e,t){return!0},deleteProperty(e,t){return!0}},Gl=Be({},qi,{get:Bl,set:Yl}),rs=e=>e,ir=e=>Reflect.getPrototypeOf(e);function Fn(e,t,n=!1,r=!1){e=e.__v_raw;const s=pe(e),i=pe(t);n||(t!==i&&Ze(s,"get",t),Ze(s,"get",i));const{has:l}=ir(s),a=r?rs:n?ls:yn;if(l.call(s,t))return a(e.get(t));if(l.call(s,i))return a(e.get(i));e!==s&&e.get(t)}function Ln(e,t=!1){const n=this.__v_raw,r=pe(n),s=pe(e);return t||(e!==s&&Ze(r,"has",e),Ze(r,"has",s)),e===s?n.has(e):n.has(e)||n.has(s)}function In(e,t=!1){return e=e.__v_raw,!t&&Ze(pe(e),"iterate",Bt),Reflect.get(e,"size",e)}function Ks(e){e=pe(e);const t=pe(this);return ir(t).has.call(t,e)||(t.add(e),_t(t,"add",e,e)),this}function qs(e,t){t=pe(t);const n=pe(this),{has:r,get:s}=ir(n);let i=r.call(n,e);i||(e=pe(e),i=r.call(n,e));const l=s.call(n,e);return n.set(e,t),i?bn(t,l)&&_t(n,"set",e,t):_t(n,"add",e,t),this}function Ws(e){const t=pe(this),{has:n,get:r}=ir(t);let s=n.call(t,e);s||(e=pe(e),s=n.call(t,e)),r&&r.call(t,e);const i=t.delete(e);return s&&_t(t,"delete",e,void 0),i}function Ys(){const e=pe(this),t=e.size!==0,n=e.clear();return t&&_t(e,"clear",void 0,void 0),n}function Dn(e,t){return function(r,s){const i=this,l=i.__v_raw,a=pe(l),f=t?rs:e?ls:yn;return!e&&Ze(a,"iterate",Bt),l.forEach((p,m)=>r.call(s,f(p),f(m),i))}}function Un(e,t,n){return function(...r){const s=this.__v_raw,i=pe(s),l=Zt(i),a=e==="entries"||e===Symbol.iterator&&l,f=e==="keys"&&l,p=s[e](...r),m=n?rs:t?ls:yn;return!t&&Ze(i,"iterate",f?Ur:Bt),{next(){const{value:b,done:y}=p.next();return y?{value:b,done:y}:{value:a?[m(b[0]),m(b[1])]:m(b),done:y}},[Symbol.iterator](){return this}}}}function Et(e){return function(...t){return e==="delete"?!1:this}}function ea(){const e={get(i){return Fn(this,i)},get size(){return In(this)},has:Ln,add:Ks,set:qs,delete:Ws,clear:Ys,forEach:Dn(!1,!1)},t={get(i){return Fn(this,i,!1,!0)},get size(){return In(this)},has:Ln,add:Ks,set:qs,delete:Ws,clear:Ys,forEach:Dn(!1,!0)},n={get(i){return Fn(this,i,!0)},get size(){return In(this,!0)},has(i){return Ln.call(this,i,!0)},add:Et("add"),set:Et("set"),delete:Et("delete"),clear:Et("clear"),forEach:Dn(!0,!1)},r={get(i){return Fn(this,i,!0,!0)},get size(){return In(this,!0)},has(i){return Ln.call(this,i,!0)},add:Et("add"),set:Et("set"),delete:Et("delete"),clear:Et("clear"),forEach:Dn(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach(i=>{e[i]=Un(i,!1,!1),n[i]=Un(i,!0,!1),t[i]=Un(i,!1,!0),r[i]=Un(i,!0,!0)}),[e,n,t,r]}const[ta,na,ra,sa]=ea();function ss(e,t){const n=t?e?sa:ra:e?na:ta;return(r,s,i)=>s==="__v_isReactive"?!e:s==="__v_isReadonly"?e:s==="__v_raw"?r:Reflect.get(he(n,s)&&s in r?n:r,s,i)}const ia={get:ss(!1,!1)},oa={get:ss(!1,!0)},la={get:ss(!0,!1)},Wi=new WeakMap,Yi=new WeakMap,Ji=new WeakMap,aa=new WeakMap;function ca(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function ua(e){return e.__v_skip||!Object.isExtensible(e)?0:ca(Tl(e))}function is(e){return en(e)?e:os(e,!1,qi,ia,Wi)}function fa(e){return os(e,!1,Gl,oa,Yi)}function Xi(e){return os(e,!0,Ql,la,Ji)}function os(e,t,n,r,s){if(!Te(e)||e.__v_raw&&!(t&&e.__v_isReactive))return e;const i=s.get(e);if(i)return i;const l=ua(e);if(l===0)return e;const a=new Proxy(e,l===2?r:n);return s.set(e,a),a}function Qt(e){return en(e)?Qt(e.__v_raw):!!(e&&e.__v_isReactive)}function en(e){return!!(e&&e.__v_isReadonly)}function Jn(e){return!!(e&&e.__v_isShallow)}function Zi(e){return Qt(e)||en(e)}function pe(e){const t=e&&e.__v_raw;return t?pe(t):e}function Qi(e){return Wn(e,"__v_skip",!0),e}const yn=e=>Te(e)?is(e):e,ls=e=>Te(e)?Xi(e):e;function Gi(e){Nt&&st&&(e=pe(e),Bi(e.dep||(e.dep=es())))}function eo(e,t){e=pe(e);const n=e.dep;n&&Vr(n)}function Re(e){return!!(e&&e.__v_isRef===!0)}function Jt(e){return to(e,!1)}function Iu(e){return to(e,!0)}function to(e,t){return Re(e)?e:new da(e,t)}class da{constructor(t,n){this.__v_isShallow=n,this.dep=void 0,this.__v_isRef=!0,this._rawValue=n?t:pe(t),this._value=n?t:yn(t)}get value(){return Gi(this),this._value}set value(t){const n=this.__v_isShallow||Jn(t)||en(t);t=n?t:pe(t),bn(t,this._rawValue)&&(this._rawValue=t,this._value=n?t:yn(t),eo(this))}}function pa(e){return Re(e)?e.value:e}const ha={get:(e,t,n)=>pa(Reflect.get(e,t,n)),set:(e,t,n,r)=>{const s=e[t];return Re(s)&&!Re(n)?(s.value=n,!0):Reflect.set(e,t,n,r)}};function no(e){return Qt(e)?e:new Proxy(e,ha)}function Vn(e){const t=Q(e)?new Array(e.length):{};for(const n in e)t[n]=ro(e,n);return t}class ga{constructor(t,n,r){this._object=t,this._key=n,this._defaultValue=r,this.__v_isRef=!0}get value(){const t=this._object[this._key];return t===void 0?this._defaultValue:t}set value(t){this._object[this._key]=t}get dep(){return Rl(pe(this._object),this._key)}}class ma{constructor(t){this._getter=t,this.__v_isRef=!0,this.__v_isReadonly=!0}get value(){return this._getter()}}function Du(e,t,n){return Re(e)?e:oe(e)?new ma(e):Te(e)&&arguments.length>1?ro(e,t,n):Jt(e)}function ro(e,t,n){const r=e[t];return Re(r)?r:new ga(e,t,n)}class va{constructor(t,n,r,s){this._setter=n,this.dep=void 0,this.__v_isRef=!0,this.__v_isReadonly=!1,this._dirty=!0,this.effect=new ts(t,()=>{this._dirty||(this._dirty=!0,eo(this))}),this.effect.computed=this,this.effect.active=this._cacheable=!s,this.__v_isReadonly=r}get value(){const t=pe(this);return Gi(t),(t._dirty||!t._cacheable)&&(t._dirty=!1,t._value=t.effect.run()),t._value}set value(t){this._setter(t)}}function ba(e,t,n=!1){let r,s;const i=oe(e);return i?(r=e,s=ot):(r=e.get,s=e.set),new va(r,s,i||!s,n)}function Mt(e,t,n,r){let s;try{s=r?e(...r):e()}catch(i){or(i,t,n)}return s}function tt(e,t,n,r){if(oe(e)){const i=Mt(e,t,n,r);return i&&Ii(i)&&i.catch(l=>{or(l,t,n)}),i}const s=[];for(let i=0;i<e.length;i++)s.push(tt(e[i],t,n,r));return s}function or(e,t,n,r=!0){const s=t?t.vnode:null;if(t){let i=t.parent;const l=t.proxy,a=n;for(;i;){const p=i.ec;if(p){for(let m=0;m<p.length;m++)if(p[m](e,l,a)===!1)return}i=i.parent}const f=t.appContext.config.errorHandler;if(f){Mt(f,null,10,[e,l,a]);return}}ya(e,n,s,r)}function ya(e,t,n,r=!0){console.error(e)}let xn=!1,jr=!1;const Ke=[];let ft=0;const Gt=[];let yt=null,jt=0;const so=Promise.resolve();let as=null;function xa(e){const t=as||so;return e?t.then(this?e.bind(this):e):t}function _a(e){let t=ft+1,n=Ke.length;for(;t<n;){const r=t+n>>>1;_n(Ke[r])<e?t=r+1:n=r}return t}function cs(e){(!Ke.length||!Ke.includes(e,xn&&e.allowRecurse?ft+1:ft))&&(e.id==null?Ke.push(e):Ke.splice(_a(e.id),0,e),io())}function io(){!xn&&!jr&&(jr=!0,as=so.then(lo))}function Ca(e){const t=Ke.indexOf(e);t>ft&&Ke.splice(t,1)}function wa(e){Q(e)?Gt.push(...e):(!yt||!yt.includes(e,e.allowRecurse?jt+1:jt))&&Gt.push(e),io()}function Js(e,t=xn?ft+1:0){for(;t<Ke.length;t++){const n=Ke[t];n&&n.pre&&(Ke.splice(t,1),t--,n())}}function oo(e){if(Gt.length){const t=[...new Set(Gt)];if(Gt.length=0,yt){yt.push(...t);return}for(yt=t,yt.sort((n,r)=>_n(n)-_n(r)),jt=0;jt<yt.length;jt++)yt[jt]();yt=null,jt=0}}const _n=e=>e.id==null?1/0:e.id,Ea=(e,t)=>{const n=_n(e)-_n(t);if(n===0){if(e.pre&&!t.pre)return-1;if(t.pre&&!e.pre)return 1}return n};function lo(e){jr=!1,xn=!0,Ke.sort(Ea);const t=ot;try{for(ft=0;ft<Ke.length;ft++){const n=Ke[ft];n&&n.active!==!1&&Mt(n,null,14)}}finally{ft=0,Ke.length=0,oo(),xn=!1,as=null,(Ke.length||Gt.length)&&lo()}}function Sa(e,t,...n){if(e.isUnmounted)return;const r=e.vnode.props||Pe;let s=n;const i=t.startsWith("update:"),l=i&&t.slice(7);if(l&&l in r){const m=`${l==="modelValue"?"model":l}Modifiers`,{number:b,trim:y}=r[m]||Pe;y&&(s=n.map(M=>He(M)?M.trim():M)),b&&(s=n.map(Ml))}let a,f=r[a=Bn(t)]||r[a=Bn(dt(t))];!f&&i&&(f=r[a=Bn(rr(t))]),f&&tt(f,e,6,s);const p=r[a+"Once"];if(p){if(!e.emitted)e.emitted={};else if(e.emitted[a])return;e.emitted[a]=!0,tt(p,e,6,s)}}function ao(e,t,n=!1){const r=t.emitsCache,s=r.get(e);if(s!==void 0)return s;const i=e.emits;let l={},a=!1;if(!oe(e)){const f=p=>{const m=ao(p,t,!0);m&&(a=!0,Be(l,m))};!n&&t.mixins.length&&t.mixins.forEach(f),e.extends&&f(e.extends),e.mixins&&e.mixins.forEach(f)}return!i&&!a?(Te(e)&&r.set(e,null),null):(Q(i)?i.forEach(f=>l[f]=null):Be(l,i),Te(e)&&r.set(e,l),l)}function lr(e,t){return!e||!Jr(t)?!1:(t=t.slice(2).replace(/Once$/,""),he(e,t[0].toLowerCase()+t.slice(1))||he(e,rr(t))||he(e,t))}let $e=null,co=null;function Xn(e){const t=$e;return $e=e,co=e&&e.type.__scopeId||null,t}function Pa(e,t=$e,n){if(!t||e._n)return e;const r=(...s)=>{r._d&&ai(-1);const i=Xn(t);let l;try{l=e(...s)}finally{Xn(i),r._d&&ai(1)}return l};return r._n=!0,r._c=!0,r._d=!0,r}function Nr(e){const{type:t,vnode:n,proxy:r,withProxy:s,props:i,propsOptions:[l],slots:a,attrs:f,emit:p,render:m,renderCache:b,data:y,setupState:M,ctx:_,inheritAttrs:C}=e;let k,K;const q=Xn(e);try{if(n.shapeFlag&4){const z=s||r;k=ut(m.call(z,z,b,i,M,y,_)),K=f}else{const z=t;k=ut(z.length>1?z(i,{attrs:f,slots:a,emit:p}):z(i,null)),K=t.props?f:Ta(f)}}catch(z){vn.length=0,or(z,e,1),k=qe(nt)}let ue=k;if(K&&C!==!1){const z=Object.keys(K),{shapeFlag:X}=ue;z.length&&X&7&&(l&&z.some(Fi)&&(K=Aa(K,l)),ue=kt(ue,K))}return n.dirs&&(ue=kt(ue),ue.dirs=ue.dirs?ue.dirs.concat(n.dirs):n.dirs),n.transition&&(ue.transition=n.transition),k=ue,Xn(q),k}const Ta=e=>{let t;for(const n in e)(n==="class"||n==="style"||Jr(n))&&((t||(t={}))[n]=e[n]);return t},Aa=(e,t)=>{const n={};for(const r in e)(!Fi(r)||!(r.slice(9)in t))&&(n[r]=e[r]);return n};function Na(e,t,n){const{props:r,children:s,component:i}=e,{props:l,children:a,patchFlag:f}=t,p=i.emitsOptions;if(t.dirs||t.transition)return!0;if(n&&f>=0){if(f&1024)return!0;if(f&16)return r?Xs(r,l,p):!!l;if(f&8){const m=t.dynamicProps;for(let b=0;b<m.length;b++){const y=m[b];if(l[y]!==r[y]&&!lr(p,y))return!0}}}else return(s||a)&&(!a||!a.$stable)?!0:r===l?!1:r?l?Xs(r,l,p):!0:!!l;return!1}function Xs(e,t,n){const r=Object.keys(t);if(r.length!==Object.keys(e).length)return!0;for(let s=0;s<r.length;s++){const i=r[s];if(t[i]!==e[i]&&!lr(n,i))return!0}return!1}function Ma({vnode:e,parent:t},n){for(;t&&t.subTree===e;)(e=t.vnode).el=n,t=t.parent}const Oa=e=>e.__isSuspense;function ka(e,t){t&&t.pendingBranch?Q(e)?t.effects.push(...e):t.effects.push(e):wa(e)}function Uu(e,t){return us(e,null,t)}const jn={};function ze(e,t,n){return us(e,t,n)}function us(e,t,{immediate:n,deep:r,flush:s,onTrack:i,onTrigger:l}=Pe){var a;const f=Ul()===((a=je)==null?void 0:a.scope)?je:null;let p,m=!1,b=!1;if(Re(e)?(p=()=>e.value,m=Jn(e)):Qt(e)?(p=()=>e,r=!0):Q(e)?(b=!0,m=e.some(z=>Qt(z)||Jn(z)),p=()=>e.map(z=>{if(Re(z))return z.value;if(Qt(z))return $t(z);if(oe(z))return Mt(z,f,2)})):oe(e)?t?p=()=>Mt(e,f,2):p=()=>{if(!(f&&f.isUnmounted))return y&&y(),tt(e,f,3,[M])}:p=ot,t&&r){const z=p;p=()=>$t(z())}let y,M=z=>{y=q.onStop=()=>{Mt(z,f,4)}},_;if(Sn)if(M=ot,t?n&&tt(t,f,3,[p(),b?[]:void 0,M]):p(),s==="sync"){const z=Tc();_=z.__watcherHandles||(z.__watcherHandles=[])}else return ot;let C=b?new Array(e.length).fill(jn):jn;const k=()=>{if(q.active)if(t){const z=q.run();(r||m||(b?z.some((X,de)=>bn(X,C[de])):bn(z,C)))&&(y&&y(),tt(t,f,3,[z,C===jn?void 0:b&&C[0]===jn?[]:C,M]),C=z)}else q.run()};k.allowRecurse=!!t;let K;s==="sync"?K=k:s==="post"?K=()=>Xe(k,f&&f.suspense):(k.pre=!0,f&&(k.id=f.uid),K=()=>cs(k));const q=new ts(p,K);t?n?k():C=q.run():s==="post"?Xe(q.run.bind(q),f&&f.suspense):q.run();const ue=()=>{q.stop(),f&&f.scope&&Xr(f.scope.effects,q)};return _&&_.push(ue),ue}function Fa(e,t,n){const r=this.proxy,s=He(e)?e.includes(".")?uo(r,e):()=>r[e]:e.bind(r,r);let i;oe(t)?i=t:(i=t.handler,n=t);const l=je;tn(this);const a=us(s,i.bind(r),n);return l?tn(l):zt(),a}function uo(e,t){const n=t.split(".");return()=>{let r=e;for(let s=0;s<n.length&&r;s++)r=r[n[s]];return r}}function $t(e,t){if(!Te(e)||e.__v_skip||(t=t||new Set,t.has(e)))return e;if(t.add(e),Re(e))$t(e.value,t);else if(Q(e))for(let n=0;n<e.length;n++)$t(e[n],t);else if(Li(e)||Zt(e))e.forEach(n=>{$t(n,t)});else if(Ui(e))for(const n in e)$t(e[n],t);return e}function Vu(e,t){const n=$e;if(n===null)return e;const r=pr(n)||n.proxy,s=e.dirs||(e.dirs=[]);for(let i=0;i<t.length;i++){let[l,a,f,p=Pe]=t[i];l&&(oe(l)&&(l={mounted:l,updated:l}),l.deep&&$t(a),s.push({dir:l,instance:r,value:a,oldValue:void 0,arg:f,modifiers:p}))}return e}function Dt(e,t,n,r){const s=e.dirs,i=t&&t.dirs;for(let l=0;l<s.length;l++){const a=s[l];i&&(a.oldValue=i[l].value);let f=a.dir[r];f&&(rn(),tt(f,n,8,[e.el,a,e,t]),sn())}}function fo(){const e={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return ds(()=>{e.isMounted=!0}),vo(()=>{e.isUnmounting=!0}),e}const et=[Function,Array],po={mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:et,onEnter:et,onAfterEnter:et,onEnterCancelled:et,onBeforeLeave:et,onLeave:et,onAfterLeave:et,onLeaveCancelled:et,onBeforeAppear:et,onAppear:et,onAfterAppear:et,onAppearCancelled:et},La={name:"BaseTransition",props:po,setup(e,{slots:t}){const n=xs(),r=fo();let s;return()=>{const i=t.default&&fs(t.default(),!0);if(!i||!i.length)return;let l=i[0];if(i.length>1){for(const C of i)if(C.type!==nt){l=C;break}}const a=pe(e),{mode:f}=a;if(r.isLeaving)return Mr(l);const p=Zs(l);if(!p)return Mr(l);const m=Cn(p,a,r,n);wn(p,m);const b=n.subTree,y=b&&Zs(b);let M=!1;const{getTransitionKey:_}=p.type;if(_){const C=_();s===void 0?s=C:C!==s&&(s=C,M=!0)}if(y&&y.type!==nt&&(!Rt(p,y)||M)){const C=Cn(y,a,r,n);if(wn(y,C),f==="out-in")return r.isLeaving=!0,C.afterLeave=()=>{r.isLeaving=!1,n.update.active!==!1&&n.update()},Mr(l);f==="in-out"&&p.type!==nt&&(C.delayLeave=(k,K,q)=>{const ue=ho(r,y);ue[String(y.key)]=y,k._leaveCb=()=>{K(),k._leaveCb=void 0,delete m.delayedLeave},m.delayedLeave=q})}return l}}},Ia=La;function ho(e,t){const{leavingVNodes:n}=e;let r=n.get(t.type);return r||(r=Object.create(null),n.set(t.type,r)),r}function Cn(e,t,n,r){const{appear:s,mode:i,persisted:l=!1,onBeforeEnter:a,onEnter:f,onAfterEnter:p,onEnterCancelled:m,onBeforeLeave:b,onLeave:y,onAfterLeave:M,onLeaveCancelled:_,onBeforeAppear:C,onAppear:k,onAfterAppear:K,onAppearCancelled:q}=t,ue=String(e.key),z=ho(n,e),X=(j,U)=>{j&&tt(j,r,9,U)},de=(j,U)=>{const ne=U[1];X(j,U),Q(j)?j.every(G=>G.length<=1)&&ne():j.length<=1&&ne()},ie={mode:i,persisted:l,beforeEnter(j){let U=a;if(!n.isMounted)if(s)U=C||a;else return;j._leaveCb&&j._leaveCb(!0);const ne=z[ue];ne&&Rt(e,ne)&&ne.el._leaveCb&&ne.el._leaveCb(),X(U,[j])},enter(j){let U=f,ne=p,G=m;if(!n.isMounted)if(s)U=k||f,ne=K||p,G=q||m;else return;let V=!1;const ce=j._enterCb=me=>{V||(V=!0,me?X(G,[j]):X(ne,[j]),ie.delayedLeave&&ie.delayedLeave(),j._enterCb=void 0)};U?de(U,[j,ce]):ce()},leave(j,U){const ne=String(e.key);if(j._enterCb&&j._enterCb(!0),n.isUnmounting)return U();X(b,[j]);let G=!1;const V=j._leaveCb=ce=>{G||(G=!0,U(),ce?X(_,[j]):X(M,[j]),j._leaveCb=void 0,z[ne]===e&&delete z[ne])};z[ne]=e,y?de(y,[j,V]):V()},clone(j){return Cn(j,t,n,r)}};return ie}function Mr(e){if(ar(e))return e=kt(e),e.children=null,e}function Zs(e){return ar(e)?e.children?e.children[0]:void 0:e}function wn(e,t){e.shapeFlag&6&&e.component?wn(e.component.subTree,t):e.shapeFlag&128?(e.ssContent.transition=t.clone(e.ssContent),e.ssFallback.transition=t.clone(e.ssFallback)):e.transition=t}function fs(e,t=!1,n){let r=[],s=0;for(let i=0;i<e.length;i++){let l=e[i];const a=n==null?l.key:String(n)+String(l.key!=null?l.key:i);l.type===Ge?(l.patchFlag&128&&s++,r=r.concat(fs(l.children,t,a))):(t||l.type!==nt)&&r.push(a!=null?kt(l,{key:a}):l)}if(s>1)for(let i=0;i<r.length;i++)r[i].patchFlag=-2;return r}function ju(e,t){return oe(e)?(()=>Be({name:e.name},t,{setup:e}))():e}const hn=e=>!!e.type.__asyncLoader,ar=e=>e.type.__isKeepAlive;function Da(e,t){go(e,"a",t)}function Ua(e,t){go(e,"da",t)}function go(e,t,n=je){const r=e.__wdc||(e.__wdc=()=>{let s=n;for(;s;){if(s.isDeactivated)return;s=s.parent}return e()});if(cr(t,r,n),n){let s=n.parent;for(;s&&s.parent;)ar(s.parent.vnode)&&Va(r,t,n,s),s=s.parent}}function Va(e,t,n,r){const s=cr(t,e,r,!0);ps(()=>{Xr(r[t],s)},n)}function cr(e,t,n=je,r=!1){if(n){const s=n[e]||(n[e]=[]),i=t.__weh||(t.__weh=(...l)=>{if(n.isUnmounted)return;rn(),tn(n);const a=tt(t,n,e,l);return zt(),sn(),a});return r?s.unshift(i):s.push(i),i}}const Ct=e=>(t,n=je)=>(!Sn||e==="sp")&&cr(e,(...r)=>t(...r),n),ja=Ct("bm"),ds=Ct("m"),Ra=Ct("bu"),mo=Ct("u"),vo=Ct("bum"),ps=Ct("um"),Ha=Ct("sp"),$a=Ct("rtg"),Ba=Ct("rtc");function za(e,t=je){cr("ec",e,t)}const hs="components",Ka="directives";function Ru(e,t){return gs(hs,e,!0,t)||e}const bo=Symbol.for("v-ndc");function Hu(e){return He(e)?gs(hs,e,!1)||e:e||bo}function $u(e){return gs(Ka,e)}function gs(e,t,n=!0,r=!1){const s=$e||je;if(s){const i=s.type;if(e===hs){const a=wc(i,!1);if(a&&(a===t||a===dt(t)||a===Gr(dt(t))))return i}const l=Qs(s[e]||i[e],t)||Qs(s.appContext[e],t);return!l&&r?i:l}}function Qs(e,t){return e&&(e[t]||e[dt(t)]||e[Gr(dt(t))])}function Bu(e,t,n,r){let s;const i=n&&n[r];if(Q(e)||He(e)){s=new Array(e.length);for(let l=0,a=e.length;l<a;l++)s[l]=t(e[l],l,void 0,i&&i[l])}else if(typeof e=="number"){s=new Array(e);for(let l=0;l<e;l++)s[l]=t(l+1,l,void 0,i&&i[l])}else if(Te(e))if(e[Symbol.iterator])s=Array.from(e,(l,a)=>t(l,a,void 0,i&&i[a]));else{const l=Object.keys(e);s=new Array(l.length);for(let a=0,f=l.length;a<f;a++){const p=l[a];s[a]=t(e[p],p,a,i&&i[a])}}else s=[];return n&&(n[r]=s),s}function zu(e,t){for(let n=0;n<t.length;n++){const r=t[n];if(Q(r))for(let s=0;s<r.length;s++)e[r[s].name]=r[s].fn;else r&&(e[r.name]=r.key?(...s)=>{const i=r.fn(...s);return i&&(i.key=r.key),i}:r.fn)}return e}function Ku(e,t,n={},r,s){if($e.isCE||$e.parent&&hn($e.parent)&&$e.parent.isCE)return t!=="default"&&(n.name=t),qe("slot",n,r&&r());let i=e[t];i&&i._c&&(i._d=!1),fr();const l=i&&yo(i(n)),a=Mo(Ge,{key:n.key||l&&l.key||`_${t}`},l||(r?r():[]),l&&e._===1?64:-2);return!s&&a.scopeId&&(a.slotScopeIds=[a.scopeId+"-s"]),i&&i._c&&(i._d=!0),a}function yo(e){return e.some(t=>Gn(t)?!(t.type===nt||t.type===Ge&&!yo(t.children)):!0)?e:null}function qu(e,t){const n={};for(const r in e)n[t&&/[A-Z]/.test(r)?`on:${r}`:Bn(r)]=e[r];return n}const Rr=e=>e?Fo(e)?pr(e)||e.proxy:Rr(e.parent):null,gn=Be(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>e.props,$attrs:e=>e.attrs,$slots:e=>e.slots,$refs:e=>e.refs,$parent:e=>Rr(e.parent),$root:e=>Rr(e.root),$emit:e=>e.emit,$options:e=>ms(e),$forceUpdate:e=>e.f||(e.f=()=>cs(e.update)),$nextTick:e=>e.n||(e.n=xa.bind(e.proxy)),$watch:e=>Fa.bind(e)}),Or=(e,t)=>e!==Pe&&!e.__isScriptSetup&&he(e,t),qa={get({_:e},t){const{ctx:n,setupState:r,data:s,props:i,accessCache:l,type:a,appContext:f}=e;let p;if(t[0]!=="$"){const M=l[t];if(M!==void 0)switch(M){case 1:return r[t];case 2:return s[t];case 4:return n[t];case 3:return i[t]}else{if(Or(r,t))return l[t]=1,r[t];if(s!==Pe&&he(s,t))return l[t]=2,s[t];if((p=e.propsOptions[0])&&he(p,t))return l[t]=3,i[t];if(n!==Pe&&he(n,t))return l[t]=4,n[t];Hr&&(l[t]=0)}}const m=gn[t];let b,y;if(m)return t==="$attrs"&&Ze(e,"get",t),m(e);if((b=a.__cssModules)&&(b=b[t]))return b;if(n!==Pe&&he(n,t))return l[t]=4,n[t];if(y=f.config.globalProperties,he(y,t))return y[t]},set({_:e},t,n){const{data:r,setupState:s,ctx:i}=e;return Or(s,t)?(s[t]=n,!0):r!==Pe&&he(r,t)?(r[t]=n,!0):he(e.props,t)||t[0]==="$"&&t.slice(1)in e?!1:(i[t]=n,!0)},has({_:{data:e,setupState:t,accessCache:n,ctx:r,appContext:s,propsOptions:i}},l){let a;return!!n[l]||e!==Pe&&he(e,l)||Or(t,l)||(a=i[0])&&he(a,l)||he(r,l)||he(gn,l)||he(s.config.globalProperties,l)},defineProperty(e,t,n){return n.get!=null?e._.accessCache[t]=0:he(n,"value")&&this.set(e,t,n.value,null),Reflect.defineProperty(e,t,n)}};function Wu(){return Wa().attrs}function Wa(){const e=xs();return e.setupContext||(e.setupContext=Io(e))}function Gs(e){return Q(e)?e.reduce((t,n)=>(t[n]=null,t),{}):e}let Hr=!0;function Ya(e){const t=ms(e),n=e.proxy,r=e.ctx;Hr=!1,t.beforeCreate&&ei(t.beforeCreate,e,"bc");const{data:s,computed:i,methods:l,watch:a,provide:f,inject:p,created:m,beforeMount:b,mounted:y,beforeUpdate:M,updated:_,activated:C,deactivated:k,beforeDestroy:K,beforeUnmount:q,destroyed:ue,unmounted:z,render:X,renderTracked:de,renderTriggered:ie,errorCaptured:j,serverPrefetch:U,expose:ne,inheritAttrs:G,components:V,directives:ce,filters:me}=t;if(p&&Ja(p,r,null),l)for(const ve in l){const fe=l[ve];oe(fe)&&(r[ve]=fe.bind(n))}if(s){const ve=s.call(n,n);Te(ve)&&(e.data=is(ve))}if(Hr=!0,i)for(const ve in i){const fe=i[ve],Ee=oe(fe)?fe.bind(n,n):oe(fe.get)?fe.get.bind(n,n):ot,Ce=!oe(fe)&&oe(fe.set)?fe.set.bind(n):ot,Oe=Pt({get:Ee,set:Ce});Object.defineProperty(r,ve,{enumerable:!0,configurable:!0,get:()=>Oe.value,set:ke=>Oe.value=ke})}if(a)for(const ve in a)xo(a[ve],r,n,ve);if(f){const ve=oe(f)?f.call(n):f;Reflect.ownKeys(ve).forEach(fe=>{tc(fe,ve[fe])})}m&&ei(m,e,"c");function le(ve,fe){Q(fe)?fe.forEach(Ee=>ve(Ee.bind(n))):fe&&ve(fe.bind(n))}if(le(ja,b),le(ds,y),le(Ra,M),le(mo,_),le(Da,C),le(Ua,k),le(za,j),le(Ba,de),le($a,ie),le(vo,q),le(ps,z),le(Ha,U),Q(ne))if(ne.length){const ve=e.exposed||(e.exposed={});ne.forEach(fe=>{Object.defineProperty(ve,fe,{get:()=>n[fe],set:Ee=>n[fe]=Ee})})}else e.exposed||(e.exposed={});X&&e.render===ot&&(e.render=X),G!=null&&(e.inheritAttrs=G),V&&(e.components=V),ce&&(e.directives=ce)}function Ja(e,t,n=ot){Q(e)&&(e=$r(e));for(const r in e){const s=e[r];let i;Te(s)?"default"in s?i=zn(s.from||r,s.default,!0):i=zn(s.from||r):i=zn(s),Re(i)?Object.defineProperty(t,r,{enumerable:!0,configurable:!0,get:()=>i.value,set:l=>i.value=l}):t[r]=i}}function ei(e,t,n){tt(Q(e)?e.map(r=>r.bind(t.proxy)):e.bind(t.proxy),t,n)}function xo(e,t,n,r){const s=r.includes(".")?uo(n,r):()=>n[r];if(He(e)){const i=t[e];oe(i)&&ze(s,i)}else if(oe(e))ze(s,e.bind(n));else if(Te(e))if(Q(e))e.forEach(i=>xo(i,t,n,r));else{const i=oe(e.handler)?e.handler.bind(n):t[e.handler];oe(i)&&ze(s,i,e)}}function ms(e){const t=e.type,{mixins:n,extends:r}=t,{mixins:s,optionsCache:i,config:{optionMergeStrategies:l}}=e.appContext,a=i.get(t);let f;return a?f=a:!s.length&&!n&&!r?f=t:(f={},s.length&&s.forEach(p=>Zn(f,p,l,!0)),Zn(f,t,l)),Te(t)&&i.set(t,f),f}function Zn(e,t,n,r=!1){const{mixins:s,extends:i}=t;i&&Zn(e,i,n,!0),s&&s.forEach(l=>Zn(e,l,n,!0));for(const l in t)if(!(r&&l==="expose")){const a=Xa[l]||n&&n[l];e[l]=a?a(e[l],t[l]):t[l]}return e}const Xa={data:ti,props:ni,emits:ni,methods:pn,computed:pn,beforeCreate:Ye,created:Ye,beforeMount:Ye,mounted:Ye,beforeUpdate:Ye,updated:Ye,beforeDestroy:Ye,beforeUnmount:Ye,destroyed:Ye,unmounted:Ye,activated:Ye,deactivated:Ye,errorCaptured:Ye,serverPrefetch:Ye,components:pn,directives:pn,watch:Qa,provide:ti,inject:Za};function ti(e,t){return t?e?function(){return Be(oe(e)?e.call(this,this):e,oe(t)?t.call(this,this):t)}:t:e}function Za(e,t){return pn($r(e),$r(t))}function $r(e){if(Q(e)){const t={};for(let n=0;n<e.length;n++)t[e[n]]=e[n];return t}return e}function Ye(e,t){return e?[...new Set([].concat(e,t))]:t}function pn(e,t){return e?Be(Object.create(null),e,t):t}function ni(e,t){return e?Q(e)&&Q(t)?[...new Set([...e,...t])]:Be(Object.create(null),Gs(e),Gs(t??{})):t}function Qa(e,t){if(!e)return t;if(!t)return e;const n=Be(Object.create(null),e);for(const r in t)n[r]=Ye(e[r],t[r]);return n}function _o(){return{app:null,config:{isNativeTag:El,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let Ga=0;function ec(e,t){return function(r,s=null){oe(r)||(r=Be({},r)),s!=null&&!Te(s)&&(s=null);const i=_o(),l=new Set;let a=!1;const f=i.app={_uid:Ga++,_component:r,_props:s,_container:null,_context:i,_instance:null,version:Ac,get config(){return i.config},set config(p){},use(p,...m){return l.has(p)||(p&&oe(p.install)?(l.add(p),p.install(f,...m)):oe(p)&&(l.add(p),p(f,...m))),f},mixin(p){return i.mixins.includes(p)||i.mixins.push(p),f},component(p,m){return m?(i.components[p]=m,f):i.components[p]},directive(p,m){return m?(i.directives[p]=m,f):i.directives[p]},mount(p,m,b){if(!a){const y=qe(r,s);return y.appContext=i,m&&t?t(y,p):e(y,p,b),a=!0,f._container=p,p.__vue_app__=f,pr(y.component)||y.component.proxy}},unmount(){a&&(e(null,f._container),delete f._container.__vue_app__)},provide(p,m){return i.provides[p]=m,f},runWithContext(p){Qn=f;try{return p()}finally{Qn=null}}};return f}}let Qn=null;function tc(e,t){if(je){let n=je.provides;const r=je.parent&&je.parent.provides;r===n&&(n=je.provides=Object.create(r)),n[e]=t}}function zn(e,t,n=!1){const r=je||$e;if(r||Qn){const s=r?r.parent==null?r.vnode.appContext&&r.vnode.appContext.provides:r.parent.provides:Qn._context.provides;if(s&&e in s)return s[e];if(arguments.length>1)return n&&oe(t)?t.call(r&&r.proxy):t}}function nc(e,t,n,r=!1){const s={},i={};Wn(i,dr,1),e.propsDefaults=Object.create(null),Co(e,t,s,i);for(const l in e.propsOptions[0])l in s||(s[l]=void 0);n?e.props=r?s:fa(s):e.type.props?e.props=s:e.props=i,e.attrs=i}function rc(e,t,n,r){const{props:s,attrs:i,vnode:{patchFlag:l}}=e,a=pe(s),[f]=e.propsOptions;let p=!1;if((r||l>0)&&!(l&16)){if(l&8){const m=e.vnode.dynamicProps;for(let b=0;b<m.length;b++){let y=m[b];if(lr(e.emitsOptions,y))continue;const M=t[y];if(f)if(he(i,y))M!==i[y]&&(i[y]=M,p=!0);else{const _=dt(y);s[_]=Br(f,a,_,M,e,!1)}else M!==i[y]&&(i[y]=M,p=!0)}}}else{Co(e,t,s,i)&&(p=!0);let m;for(const b in a)(!t||!he(t,b)&&((m=rr(b))===b||!he(t,m)))&&(f?n&&(n[b]!==void 0||n[m]!==void 0)&&(s[b]=Br(f,a,b,void 0,e,!0)):delete s[b]);if(i!==a)for(const b in i)(!t||!he(t,b))&&(delete i[b],p=!0)}p&&_t(e,"set","$attrs")}function Co(e,t,n,r){const[s,i]=e.propsOptions;let l=!1,a;if(t)for(let f in t){if($n(f))continue;const p=t[f];let m;s&&he(s,m=dt(f))?!i||!i.includes(m)?n[m]=p:(a||(a={}))[m]=p:lr(e.emitsOptions,f)||(!(f in r)||p!==r[f])&&(r[f]=p,l=!0)}if(i){const f=pe(n),p=a||Pe;for(let m=0;m<i.length;m++){const b=i[m];n[b]=Br(s,f,b,p[b],e,!he(p,b))}}return l}function Br(e,t,n,r,s,i){const l=e[n];if(l!=null){const a=he(l,"default");if(a&&r===void 0){const f=l.default;if(l.type!==Function&&!l.skipFactory&&oe(f)){const{propsDefaults:p}=s;n in p?r=p[n]:(tn(s),r=p[n]=f.call(null,t),zt())}else r=f}l[0]&&(i&&!a?r=!1:l[1]&&(r===""||r===rr(n))&&(r=!0))}return r}function wo(e,t,n=!1){const r=t.propsCache,s=r.get(e);if(s)return s;const i=e.props,l={},a=[];let f=!1;if(!oe(e)){const m=b=>{f=!0;const[y,M]=wo(b,t,!0);Be(l,y),M&&a.push(...M)};!n&&t.mixins.length&&t.mixins.forEach(m),e.extends&&m(e.extends),e.mixins&&e.mixins.forEach(m)}if(!i&&!f)return Te(e)&&r.set(e,Xt),Xt;if(Q(i))for(let m=0;m<i.length;m++){const b=dt(i[m]);ri(b)&&(l[b]=Pe)}else if(i)for(const m in i){const b=dt(m);if(ri(b)){const y=i[m],M=l[b]=Q(y)||oe(y)?{type:y}:Be({},y);if(M){const _=oi(Boolean,M.type),C=oi(String,M.type);M[0]=_>-1,M[1]=C<0||_<C,(_>-1||he(M,"default"))&&a.push(b)}}}const p=[l,a];return Te(e)&&r.set(e,p),p}function ri(e){return e[0]!=="$"}function si(e){const t=e&&e.toString().match(/^\s*(function|class) (\w+)/);return t?t[2]:e===null?"null":""}function ii(e,t){return si(e)===si(t)}function oi(e,t){return Q(t)?t.findIndex(n=>ii(n,e)):oe(t)&&ii(t,e)?0:-1}const Eo=e=>e[0]==="_"||e==="$stable",vs=e=>Q(e)?e.map(ut):[ut(e)],sc=(e,t,n)=>{if(t._n)return t;const r=Pa((...s)=>vs(t(...s)),n);return r._c=!1,r},So=(e,t,n)=>{const r=e._ctx;for(const s in e){if(Eo(s))continue;const i=e[s];if(oe(i))t[s]=sc(s,i,r);else if(i!=null){const l=vs(i);t[s]=()=>l}}},Po=(e,t)=>{const n=vs(t);e.slots.default=()=>n},ic=(e,t)=>{if(e.vnode.shapeFlag&32){const n=t._;n?(e.slots=pe(t),Wn(t,"_",n)):So(t,e.slots={})}else e.slots={},t&&Po(e,t);Wn(e.slots,dr,1)},oc=(e,t,n)=>{const{vnode:r,slots:s}=e;let i=!0,l=Pe;if(r.shapeFlag&32){const a=t._;a?n&&a===1?i=!1:(Be(s,t),!n&&a===1&&delete s._):(i=!t.$stable,So(t,s)),l=t}else t&&(Po(e,t),l={default:1});if(i)for(const a in s)!Eo(a)&&!(a in l)&&delete s[a]};function zr(e,t,n,r,s=!1){if(Q(e)){e.forEach((y,M)=>zr(y,t&&(Q(t)?t[M]:t),n,r,s));return}if(hn(r)&&!s)return;const i=r.shapeFlag&4?pr(r.component)||r.component.proxy:r.el,l=s?null:i,{i:a,r:f}=e,p=t&&t.r,m=a.refs===Pe?a.refs={}:a.refs,b=a.setupState;if(p!=null&&p!==f&&(He(p)?(m[p]=null,he(b,p)&&(b[p]=null)):Re(p)&&(p.value=null)),oe(f))Mt(f,a,12,[l,m]);else{const y=He(f),M=Re(f);if(y||M){const _=()=>{if(e.f){const C=y?he(b,f)?b[f]:m[f]:f.value;s?Q(C)&&Xr(C,i):Q(C)?C.includes(i)||C.push(i):y?(m[f]=[i],he(b,f)&&(b[f]=m[f])):(f.value=[i],e.k&&(m[e.k]=f.value))}else y?(m[f]=l,he(b,f)&&(b[f]=l)):M&&(f.value=l,e.k&&(m[e.k]=l))};l?(_.id=-1,Xe(_,n)):_()}}}const Xe=ka;function lc(e){return ac(e)}function ac(e,t){const n=Ir();n.__VUE__=!0;const{insert:r,remove:s,patchProp:i,createElement:l,createText:a,createComment:f,setText:p,setElementText:m,parentNode:b,nextSibling:y,setScopeId:M=ot,insertStaticContent:_}=e,C=(d,h,x,E=null,w=null,N=null,I=!1,A=null,F=!!h.dynamicChildren)=>{if(d===h)return;d&&!Rt(d,h)&&(E=_e(d),ke(d,w,N,!0),d=null),h.patchFlag===-2&&(F=!1,h.dynamicChildren=null);const{type:P,ref:W,shapeFlag:$}=h;switch(P){case ur:k(d,h,x,E);break;case nt:K(d,h,x,E);break;case Kn:d==null&&q(h,x,E,I);break;case Ge:V(d,h,x,E,w,N,I,A,F);break;default:$&1?X(d,h,x,E,w,N,I,A,F):$&6?ce(d,h,x,E,w,N,I,A,F):($&64||$&128)&&P.process(d,h,x,E,w,N,I,A,F,wt)}W!=null&&w&&zr(W,d&&d.ref,N,h||d,!h)},k=(d,h,x,E)=>{if(d==null)r(h.el=a(h.children),x,E);else{const w=h.el=d.el;h.children!==d.children&&p(w,h.children)}},K=(d,h,x,E)=>{d==null?r(h.el=f(h.children||""),x,E):h.el=d.el},q=(d,h,x,E)=>{[d.el,d.anchor]=_(d.children,h,x,E,d.el,d.anchor)},ue=({el:d,anchor:h},x,E)=>{let w;for(;d&&d!==h;)w=y(d),r(d,x,E),d=w;r(h,x,E)},z=({el:d,anchor:h})=>{let x;for(;d&&d!==h;)x=y(d),s(d),d=x;s(h)},X=(d,h,x,E,w,N,I,A,F)=>{I=I||h.type==="svg",d==null?de(h,x,E,w,N,I,A,F):U(d,h,w,N,I,A,F)},de=(d,h,x,E,w,N,I,A)=>{let F,P;const{type:W,props:$,shapeFlag:Y,transition:Z,dirs:ae}=d;if(F=d.el=l(d.type,N,$&&$.is,$),Y&8?m(F,d.children):Y&16&&j(d.children,F,null,E,w,N&&W!=="foreignObject",I,A),ae&&Dt(d,null,E,"created"),ie(F,d,d.scopeId,I,E),$){for(const be in $)be!=="value"&&!$n(be)&&i(F,be,null,$[be],N,d.children,E,w,B);"value"in $&&i(F,"value",null,$.value),(P=$.onVnodeBeforeMount)&&ct(P,E,d)}ae&&Dt(d,null,E,"beforeMount");const ye=(!w||w&&!w.pendingBranch)&&Z&&!Z.persisted;ye&&Z.beforeEnter(F),r(F,h,x),((P=$&&$.onVnodeMounted)||ye||ae)&&Xe(()=>{P&&ct(P,E,d),ye&&Z.enter(F),ae&&Dt(d,null,E,"mounted")},w)},ie=(d,h,x,E,w)=>{if(x&&M(d,x),E)for(let N=0;N<E.length;N++)M(d,E[N]);if(w){let N=w.subTree;if(h===N){const I=w.vnode;ie(d,I,I.scopeId,I.slotScopeIds,w.parent)}}},j=(d,h,x,E,w,N,I,A,F=0)=>{for(let P=F;P<d.length;P++){const W=d[P]=A?At(d[P]):ut(d[P]);C(null,W,h,x,E,w,N,I,A)}},U=(d,h,x,E,w,N,I)=>{const A=h.el=d.el;let{patchFlag:F,dynamicChildren:P,dirs:W}=h;F|=d.patchFlag&16;const $=d.props||Pe,Y=h.props||Pe;let Z;x&&Ut(x,!1),(Z=Y.onVnodeBeforeUpdate)&&ct(Z,x,h,d),W&&Dt(h,d,x,"beforeUpdate"),x&&Ut(x,!0);const ae=w&&h.type!=="foreignObject";if(P?ne(d.dynamicChildren,P,A,x,E,ae,N):I||fe(d,h,A,null,x,E,ae,N,!1),F>0){if(F&16)G(A,h,$,Y,x,E,w);else if(F&2&&$.class!==Y.class&&i(A,"class",null,Y.class,w),F&4&&i(A,"style",$.style,Y.style,w),F&8){const ye=h.dynamicProps;for(let be=0;be<ye.length;be++){const c=ye[be],o=$[c],T=Y[c];(T!==o||c==="value")&&i(A,c,o,T,w,d.children,x,E,B)}}F&1&&d.children!==h.children&&m(A,h.children)}else!I&&P==null&&G(A,h,$,Y,x,E,w);((Z=Y.onVnodeUpdated)||W)&&Xe(()=>{Z&&ct(Z,x,h,d),W&&Dt(h,d,x,"updated")},E)},ne=(d,h,x,E,w,N,I)=>{for(let A=0;A<h.length;A++){const F=d[A],P=h[A],W=F.el&&(F.type===Ge||!Rt(F,P)||F.shapeFlag&70)?b(F.el):x;C(F,P,W,null,E,w,N,I,!0)}},G=(d,h,x,E,w,N,I)=>{if(x!==E){if(x!==Pe)for(const A in x)!$n(A)&&!(A in E)&&i(d,A,x[A],null,I,h.children,w,N,B);for(const A in E){if($n(A))continue;const F=E[A],P=x[A];F!==P&&A!=="value"&&i(d,A,P,F,I,h.children,w,N,B)}"value"in E&&i(d,"value",x.value,E.value)}},V=(d,h,x,E,w,N,I,A,F)=>{const P=h.el=d?d.el:a(""),W=h.anchor=d?d.anchor:a("");let{patchFlag:$,dynamicChildren:Y,slotScopeIds:Z}=h;Z&&(A=A?A.concat(Z):Z),d==null?(r(P,x,E),r(W,x,E),j(h.children,x,W,w,N,I,A,F)):$>0&&$&64&&Y&&d.dynamicChildren?(ne(d.dynamicChildren,Y,x,w,N,I,A),(h.key!=null||w&&h===w.subTree)&&bs(d,h,!0)):fe(d,h,x,W,w,N,I,A,F)},ce=(d,h,x,E,w,N,I,A,F)=>{h.slotScopeIds=A,d==null?h.shapeFlag&512?w.ctx.activate(h,x,E,I,F):me(h,x,E,w,N,I,F):ee(d,h,F)},me=(d,h,x,E,w,N,I)=>{const A=d.component=yc(d,E,w);if(ar(d)&&(A.ctx.renderer=wt),xc(A),A.asyncDep){if(w&&w.registerDep(A,le),!d.el){const F=A.subTree=qe(nt);K(null,F,h,x)}return}le(A,d,h,x,w,N,I)},ee=(d,h,x)=>{const E=h.component=d.component;if(Na(d,h,x))if(E.asyncDep&&!E.asyncResolved){ve(E,h,x);return}else E.next=h,Ca(E.update),E.update();else h.el=d.el,E.vnode=h},le=(d,h,x,E,w,N,I)=>{const A=()=>{if(d.isMounted){let{next:W,bu:$,u:Y,parent:Z,vnode:ae}=d,ye=W,be;Ut(d,!1),W?(W.el=ae.el,ve(d,W,I)):W=ae,$&&Ar($),(be=W.props&&W.props.onVnodeBeforeUpdate)&&ct(be,Z,W,ae),Ut(d,!0);const c=Nr(d),o=d.subTree;d.subTree=c,C(o,c,b(o.el),_e(o),d,w,N),W.el=c.el,ye===null&&Ma(d,c.el),Y&&Xe(Y,w),(be=W.props&&W.props.onVnodeUpdated)&&Xe(()=>ct(be,Z,W,ae),w)}else{let W;const{el:$,props:Y}=h,{bm:Z,m:ae,parent:ye}=d,be=hn(h);if(Ut(d,!1),Z&&Ar(Z),!be&&(W=Y&&Y.onVnodeBeforeMount)&&ct(W,ye,h),Ut(d,!0),$&&an){const c=()=>{d.subTree=Nr(d),an($,d.subTree,d,w,null)};be?h.type.__asyncLoader().then(()=>!d.isUnmounted&&c()):c()}else{const c=d.subTree=Nr(d);C(null,c,x,E,d,w,N),h.el=c.el}if(ae&&Xe(ae,w),!be&&(W=Y&&Y.onVnodeMounted)){const c=h;Xe(()=>ct(W,ye,c),w)}(h.shapeFlag&256||ye&&hn(ye.vnode)&&ye.vnode.shapeFlag&256)&&d.a&&Xe(d.a,w),d.isMounted=!0,h=x=E=null}},F=d.effect=new ts(A,()=>cs(P),d.scope),P=d.update=()=>F.run();P.id=d.uid,Ut(d,!0),P()},ve=(d,h,x)=>{h.component=d;const E=d.vnode.props;d.vnode=h,d.next=null,rc(d,h.props,E,x),oc(d,h.children,x),rn(),Js(),sn()},fe=(d,h,x,E,w,N,I,A,F=!1)=>{const P=d&&d.children,W=d?d.shapeFlag:0,$=h.children,{patchFlag:Y,shapeFlag:Z}=h;if(Y>0){if(Y&128){Ce(P,$,x,E,w,N,I,A,F);return}else if(Y&256){Ee(P,$,x,E,w,N,I,A,F);return}}Z&8?(W&16&&B(P,w,N),$!==P&&m(x,$)):W&16?Z&16?Ce(P,$,x,E,w,N,I,A,F):B(P,w,N,!0):(W&8&&m(x,""),Z&16&&j($,x,E,w,N,I,A,F))},Ee=(d,h,x,E,w,N,I,A,F)=>{d=d||Xt,h=h||Xt;const P=d.length,W=h.length,$=Math.min(P,W);let Y;for(Y=0;Y<$;Y++){const Z=h[Y]=F?At(h[Y]):ut(h[Y]);C(d[Y],Z,x,null,w,N,I,A,F)}P>W?B(d,w,N,!0,!1,$):j(h,x,E,w,N,I,A,F,$)},Ce=(d,h,x,E,w,N,I,A,F)=>{let P=0;const W=h.length;let $=d.length-1,Y=W-1;for(;P<=$&&P<=Y;){const Z=d[P],ae=h[P]=F?At(h[P]):ut(h[P]);if(Rt(Z,ae))C(Z,ae,x,null,w,N,I,A,F);else break;P++}for(;P<=$&&P<=Y;){const Z=d[$],ae=h[Y]=F?At(h[Y]):ut(h[Y]);if(Rt(Z,ae))C(Z,ae,x,null,w,N,I,A,F);else break;$--,Y--}if(P>$){if(P<=Y){const Z=Y+1,ae=Z<W?h[Z].el:E;for(;P<=Y;)C(null,h[P]=F?At(h[P]):ut(h[P]),x,ae,w,N,I,A,F),P++}}else if(P>Y)for(;P<=$;)ke(d[P],w,N,!0),P++;else{const Z=P,ae=P,ye=new Map;for(P=ae;P<=Y;P++){const re=h[P]=F?At(h[P]):ut(h[P]);re.key!=null&&ye.set(re.key,P)}let be,c=0;const o=Y-ae+1;let T=!1,H=0;const O=new Array(o);for(P=0;P<o;P++)O[P]=0;for(P=Z;P<=$;P++){const re=d[P];if(c>=o){ke(re,w,N,!0);continue}let ge;if(re.key!=null)ge=ye.get(re.key);else for(be=ae;be<=Y;be++)if(O[be-ae]===0&&Rt(re,h[be])){ge=be;break}ge===void 0?ke(re,w,N,!0):(O[ge-ae]=P+1,ge>=H?H=ge:T=!0,C(re,h[ge],x,null,w,N,I,A,F),c++)}const J=T?cc(O):Xt;for(be=J.length-1,P=o-1;P>=0;P--){const re=ae+P,ge=h[re],Se=re+1<W?h[re+1].el:E;O[P]===0?C(null,ge,x,Se,w,N,I,A,F):T&&(be<0||P!==J[be]?Oe(ge,x,Se,2):be--)}}},Oe=(d,h,x,E,w=null)=>{const{el:N,type:I,transition:A,children:F,shapeFlag:P}=d;if(P&6){Oe(d.component.subTree,h,x,E);return}if(P&128){d.suspense.move(h,x,E);return}if(P&64){I.move(d,h,x,wt);return}if(I===Ge){r(N,h,x);for(let $=0;$<F.length;$++)Oe(F[$],h,x,E);r(d.anchor,h,x);return}if(I===Kn){ue(d,h,x);return}if(E!==2&&P&1&&A)if(E===0)A.beforeEnter(N),r(N,h,x),Xe(()=>A.enter(N),w);else{const{leave:$,delayLeave:Y,afterLeave:Z}=A,ae=()=>r(N,h,x),ye=()=>{$(N,()=>{ae(),Z&&Z()})};Y?Y(N,ae,ye):ye()}else r(N,h,x)},ke=(d,h,x,E=!1,w=!1)=>{const{type:N,props:I,ref:A,children:F,dynamicChildren:P,shapeFlag:W,patchFlag:$,dirs:Y}=d;if(A!=null&&zr(A,null,x,d,!0),W&256){h.ctx.deactivate(d);return}const Z=W&1&&Y,ae=!hn(d);let ye;if(ae&&(ye=I&&I.onVnodeBeforeUnmount)&&ct(ye,h,d),W&6)De(d.component,x,E);else{if(W&128){d.suspense.unmount(x,E);return}Z&&Dt(d,null,h,"beforeUnmount"),W&64?d.type.remove(d,h,x,w,wt,E):P&&(N!==Ge||$>0&&$&64)?B(P,h,x,!1,!0):(N===Ge&&$&384||!w&&W&16)&&B(F,h,x),E&&at(d)}(ae&&(ye=I&&I.onVnodeUnmounted)||Z)&&Xe(()=>{ye&&ct(ye,h,d),Z&&Dt(d,null,h,"unmounted")},x)},at=d=>{const{type:h,el:x,anchor:E,transition:w}=d;if(h===Ge){pt(x,E);return}if(h===Kn){z(d);return}const N=()=>{s(x),w&&!w.persisted&&w.afterLeave&&w.afterLeave()};if(d.shapeFlag&1&&w&&!w.persisted){const{leave:I,delayLeave:A}=w,F=()=>I(x,N);A?A(d.el,N,F):F()}else N()},pt=(d,h)=>{let x;for(;d!==h;)x=y(d),s(d),d=x;s(h)},De=(d,h,x)=>{const{bum:E,scope:w,update:N,subTree:I,um:A}=d;E&&Ar(E),w.stop(),N&&(N.active=!1,ke(I,d,h,x)),A&&Xe(A,h),Xe(()=>{d.isUnmounted=!0},h),h&&h.pendingBranch&&!h.isUnmounted&&d.asyncDep&&!d.asyncResolved&&d.suspenseId===h.pendingId&&(h.deps--,h.deps===0&&h.resolve())},B=(d,h,x,E=!1,w=!1,N=0)=>{for(let I=N;I<d.length;I++)ke(d[I],h,x,E,w)},_e=d=>d.shapeFlag&6?_e(d.component.subTree):d.shapeFlag&128?d.suspense.next():y(d.anchor||d.el),on=(d,h,x)=>{d==null?h._vnode&&ke(h._vnode,null,null,!0):C(h._vnode||null,d,h,null,null,null,x),Js(),oo(),h._vnode=d},wt={p:C,um:ke,m:Oe,r:at,mt:me,mc:j,pc:fe,pbc:ne,n:_e,o:e};let ln,an;return t&&([ln,an]=t(wt)),{render:on,hydrate:ln,createApp:ec(on,ln)}}function Ut({effect:e,update:t},n){e.allowRecurse=t.allowRecurse=n}function bs(e,t,n=!1){const r=e.children,s=t.children;if(Q(r)&&Q(s))for(let i=0;i<r.length;i++){const l=r[i];let a=s[i];a.shapeFlag&1&&!a.dynamicChildren&&((a.patchFlag<=0||a.patchFlag===32)&&(a=s[i]=At(s[i]),a.el=l.el),n||bs(l,a)),a.type===ur&&(a.el=l.el)}}function cc(e){const t=e.slice(),n=[0];let r,s,i,l,a;const f=e.length;for(r=0;r<f;r++){const p=e[r];if(p!==0){if(s=n[n.length-1],e[s]<p){t[r]=s,n.push(r);continue}for(i=0,l=n.length-1;i<l;)a=i+l>>1,e[n[a]]<p?i=a+1:l=a;p<e[n[i]]&&(i>0&&(t[r]=n[i-1]),n[i]=r)}}for(i=n.length,l=n[i-1];i-- >0;)n[i]=l,l=t[l];return n}const uc=e=>e.__isTeleport,mn=e=>e&&(e.disabled||e.disabled===""),li=e=>typeof SVGElement<"u"&&e instanceof SVGElement,Kr=(e,t)=>{const n=e&&e.to;return He(n)?t?t(n):null:n},fc={__isTeleport:!0,process(e,t,n,r,s,i,l,a,f,p){const{mc:m,pc:b,pbc:y,o:{insert:M,querySelector:_,createText:C,createComment:k}}=p,K=mn(t.props);let{shapeFlag:q,children:ue,dynamicChildren:z}=t;if(e==null){const X=t.el=C(""),de=t.anchor=C("");M(X,n,r),M(de,n,r);const ie=t.target=Kr(t.props,_),j=t.targetAnchor=C("");ie&&(M(j,ie),l=l||li(ie));const U=(ne,G)=>{q&16&&m(ue,ne,G,s,i,l,a,f)};K?U(n,de):ie&&U(ie,j)}else{t.el=e.el;const X=t.anchor=e.anchor,de=t.target=e.target,ie=t.targetAnchor=e.targetAnchor,j=mn(e.props),U=j?n:de,ne=j?X:ie;if(l=l||li(de),z?(y(e.dynamicChildren,z,U,s,i,l,a),bs(e,t,!0)):f||b(e,t,U,ne,s,i,l,a,!1),K)j||Rn(t,n,X,p,1);else if((t.props&&t.props.to)!==(e.props&&e.props.to)){const G=t.target=Kr(t.props,_);G&&Rn(t,G,null,p,0)}else j&&Rn(t,de,ie,p,1)}To(t)},remove(e,t,n,r,{um:s,o:{remove:i}},l){const{shapeFlag:a,children:f,anchor:p,targetAnchor:m,target:b,props:y}=e;if(b&&i(m),(l||!mn(y))&&(i(p),a&16))for(let M=0;M<f.length;M++){const _=f[M];s(_,t,n,!0,!!_.dynamicChildren)}},move:Rn,hydrate:dc};function Rn(e,t,n,{o:{insert:r},m:s},i=2){i===0&&r(e.targetAnchor,t,n);const{el:l,anchor:a,shapeFlag:f,children:p,props:m}=e,b=i===2;if(b&&r(l,t,n),(!b||mn(m))&&f&16)for(let y=0;y<p.length;y++)s(p[y],t,n,2);b&&r(a,t,n)}function dc(e,t,n,r,s,i,{o:{nextSibling:l,parentNode:a,querySelector:f}},p){const m=t.target=Kr(t.props,f);if(m){const b=m._lpa||m.firstChild;if(t.shapeFlag&16)if(mn(t.props))t.anchor=p(l(e),t,a(e),n,r,s,i),t.targetAnchor=b;else{t.anchor=l(e);let y=b;for(;y;)if(y=l(y),y&&y.nodeType===8&&y.data==="teleport anchor"){t.targetAnchor=y,m._lpa=t.targetAnchor&&l(t.targetAnchor);break}p(b,t,m,n,r,s,i)}To(t)}return t.anchor&&l(t.anchor)}const Yu=fc;function To(e){const t=e.ctx;if(t&&t.ut){let n=e.children[0].el;for(;n!==e.targetAnchor;)n.nodeType===1&&n.setAttribute("data-v-owner",t.uid),n=n.nextSibling;t.ut()}}const Ge=Symbol.for("v-fgt"),ur=Symbol.for("v-txt"),nt=Symbol.for("v-cmt"),Kn=Symbol.for("v-stc"),vn=[];let it=null;function fr(e=!1){vn.push(it=e?null:[])}function pc(){vn.pop(),it=vn[vn.length-1]||null}let En=1;function ai(e){En+=e}function Ao(e){return e.dynamicChildren=En>0?it||Xt:null,pc(),En>0&&it&&it.push(e),e}function No(e,t,n,r,s,i){return Ao(rt(e,t,n,r,s,i,!0))}function Mo(e,t,n,r,s){return Ao(qe(e,t,n,r,s,!0))}function Gn(e){return e?e.__v_isVNode===!0:!1}function Rt(e,t){return e.type===t.type&&e.key===t.key}const dr="__vInternal",Oo=({key:e})=>e??null,qn=({ref:e,ref_key:t,ref_for:n})=>(typeof e=="number"&&(e=""+e),e!=null?He(e)||Re(e)||oe(e)?{i:$e,r:e,k:t,f:!!n}:e:null);function rt(e,t=null,n=null,r=0,s=null,i=e===Ge?0:1,l=!1,a=!1){const f={__v_isVNode:!0,__v_skip:!0,type:e,props:t,key:t&&Oo(t),ref:t&&qn(t),scopeId:co,slotScopeIds:null,children:n,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:i,patchFlag:r,dynamicProps:s,dynamicChildren:null,appContext:null,ctx:$e};return a?(ys(f,n),i&128&&e.normalize(f)):n&&(f.shapeFlag|=He(n)?8:16),En>0&&!l&&it&&(f.patchFlag>0||i&6)&&f.patchFlag!==32&&it.push(f),f}const qe=hc;function hc(e,t=null,n=null,r=0,s=null,i=!1){if((!e||e===bo)&&(e=nt),Gn(e)){const a=kt(e,t,!0);return n&&ys(a,n),En>0&&!i&&it&&(a.shapeFlag&6?it[it.indexOf(e)]=a:it.push(a)),a.patchFlag|=-2,a}if(Ec(e)&&(e=e.__vccOpts),t){t=gc(t);let{class:a,style:f}=t;a&&!He(a)&&(t.class=sr(a)),Te(f)&&(Zi(f)&&!Q(f)&&(f=Be({},f)),t.style=Tn(f))}const l=He(e)?1:Oa(e)?128:uc(e)?64:Te(e)?4:oe(e)?2:0;return rt(e,t,n,r,s,l,i,!0)}function gc(e){return e?Zi(e)||dr in e?Be({},e):e:null}function kt(e,t,n=!1){const{props:r,ref:s,patchFlag:i,children:l}=e,a=t?ko(r||{},t):r;return{__v_isVNode:!0,__v_skip:!0,type:e.type,props:a,key:a&&Oo(a),ref:t&&t.ref?n&&s?Q(s)?s.concat(qn(t)):[s,qn(t)]:qn(t):s,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:l,target:e.target,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:t&&e.type!==Ge?i===-1?16:i|16:i,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:e.transition,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&kt(e.ssContent),ssFallback:e.ssFallback&&kt(e.ssFallback),el:e.el,anchor:e.anchor,ctx:e.ctx,ce:e.ce}}function mc(e=" ",t=0){return qe(ur,null,e,t)}function Ju(e,t){const n=qe(Kn,null,e);return n.staticCount=t,n}function Xu(e="",t=!1){return t?(fr(),Mo(nt,null,e)):qe(nt,null,e)}function ut(e){return e==null||typeof e=="boolean"?qe(nt):Q(e)?qe(Ge,null,e.slice()):typeof e=="object"?At(e):qe(ur,null,String(e))}function At(e){return e.el===null&&e.patchFlag!==-1||e.memo?e:kt(e)}function ys(e,t){let n=0;const{shapeFlag:r}=e;if(t==null)t=null;else if(Q(t))n=16;else if(typeof t=="object")if(r&65){const s=t.default;s&&(s._c&&(s._d=!1),ys(e,s()),s._c&&(s._d=!0));return}else{n=32;const s=t._;!s&&!(dr in t)?t._ctx=$e:s===3&&$e&&($e.slots._===1?t._=1:(t._=2,e.patchFlag|=1024))}else oe(t)?(t={default:t,_ctx:$e},n=32):(t=String(t),r&64?(n=16,t=[mc(t)]):n=8);e.children=t,e.shapeFlag|=n}function ko(...e){const t={};for(let n=0;n<e.length;n++){const r=e[n];for(const s in r)if(s==="class")t.class!==r.class&&(t.class=sr([t.class,r.class]));else if(s==="style")t.style=Tn([t.style,r.style]);else if(Jr(s)){const i=t[s],l=r[s];l&&i!==l&&!(Q(i)&&i.includes(l))&&(t[s]=i?[].concat(i,l):l)}else s!==""&&(t[s]=r[s])}return t}function ct(e,t,n,r=null){tt(e,t,7,[n,r])}const vc=_o();let bc=0;function yc(e,t,n){const r=e.type,s=(t?t.appContext:e.appContext)||vc,i={uid:bc++,vnode:e,type:r,parent:t,appContext:s,root:null,next:null,subTree:null,effect:null,update:null,scope:new ji(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:t?t.provides:Object.create(s.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:wo(r,s),emitsOptions:ao(r,s),emit:null,emitted:null,propsDefaults:Pe,inheritAttrs:r.inheritAttrs,ctx:Pe,data:Pe,props:Pe,attrs:Pe,slots:Pe,refs:Pe,setupState:Pe,setupContext:null,attrsProxy:null,slotsProxy:null,suspense:n,suspenseId:n?n.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return i.ctx={_:i},i.root=t?t.root:i,i.emit=Sa.bind(null,i),e.ce&&e.ce(i),i}let je=null;const xs=()=>je||$e;let _s,Yt,ci="__VUE_INSTANCE_SETTERS__";(Yt=Ir()[ci])||(Yt=Ir()[ci]=[]),Yt.push(e=>je=e),_s=e=>{Yt.length>1?Yt.forEach(t=>t(e)):Yt[0](e)};const tn=e=>{_s(e),e.scope.on()},zt=()=>{je&&je.scope.off(),_s(null)};function Fo(e){return e.vnode.shapeFlag&4}let Sn=!1;function xc(e,t=!1){Sn=t;const{props:n,children:r}=e.vnode,s=Fo(e);nc(e,n,s,t),ic(e,r);const i=s?_c(e,t):void 0;return Sn=!1,i}function _c(e,t){const n=e.type;e.accessCache=Object.create(null),e.proxy=Qi(new Proxy(e.ctx,qa));const{setup:r}=n;if(r){const s=e.setupContext=r.length>1?Io(e):null;tn(e),rn();const i=Mt(r,e,0,[e.props,s]);if(sn(),zt(),Ii(i)){if(i.then(zt,zt),t)return i.then(l=>{ui(e,l,t)}).catch(l=>{or(l,e,0)});e.asyncDep=i}else ui(e,i,t)}else Lo(e,t)}function ui(e,t,n){oe(t)?e.type.__ssrInlineRender?e.ssrRender=t:e.render=t:Te(t)&&(e.setupState=no(t)),Lo(e,n)}let fi;function Lo(e,t,n){const r=e.type;if(!e.render){if(!t&&fi&&!r.render){const s=r.template||ms(e).template;if(s){const{isCustomElement:i,compilerOptions:l}=e.appContext.config,{delimiters:a,compilerOptions:f}=r,p=Be(Be({isCustomElement:i,delimiters:a},l),f);r.render=fi(s,p)}}e.render=r.render||ot}tn(e),rn(),Ya(e),sn(),zt()}function Cc(e){return e.attrsProxy||(e.attrsProxy=new Proxy(e.attrs,{get(t,n){return Ze(e,"get","$attrs"),t[n]}}))}function Io(e){const t=n=>{e.exposed=n||{}};return{get attrs(){return Cc(e)},slots:e.slots,emit:e.emit,expose:t}}function pr(e){if(e.exposed)return e.exposeProxy||(e.exposeProxy=new Proxy(no(Qi(e.exposed)),{get(t,n){if(n in t)return t[n];if(n in gn)return gn[n](e)},has(t,n){return n in t||n in gn}}))}function wc(e,t=!0){return oe(e)?e.displayName||e.name:e.name||t&&e.__name}function Ec(e){return oe(e)&&"__vccOpts"in e}const Pt=(e,t)=>ba(e,t,Sn);function Sc(e,t,n){const r=arguments.length;return r===2?Te(t)&&!Q(t)?Gn(t)?qe(e,null,[t]):qe(e,t):qe(e,null,t):(r>3?n=Array.prototype.slice.call(arguments,2):r===3&&Gn(n)&&(n=[n]),qe(e,t,n))}const Pc=Symbol.for("v-scx"),Tc=()=>zn(Pc),Ac="3.3.4";function Nc(e,t){const n=Object.create(null),r=e.split(",");for(let s=0;s<r.length;s++)n[r[s]]=!0;return t?s=>!!n[s.toLowerCase()]:s=>!!n[s]}const Mc=/^on[^a-z]/,Oc=e=>Mc.test(e),kc=e=>e.startsWith("onUpdate:"),hr=Object.assign,lt=Array.isArray,gr=e=>Uo(e)==="[object Set]",di=e=>Uo(e)==="[object Date]",Do=e=>typeof e=="function",Pn=e=>typeof e=="string",pi=e=>typeof e=="symbol",qr=e=>e!==null&&typeof e=="object",Fc=Object.prototype.toString,Uo=e=>Fc.call(e),Vo=e=>{const t=Object.create(null);return n=>t[n]||(t[n]=e(n))},Lc=/\B([A-Z])/g,Cs=Vo(e=>e.replace(Lc,"-$1").toLowerCase()),Ic=Vo(e=>e.charAt(0).toUpperCase()+e.slice(1)),Dc=(e,t)=>{for(let n=0;n<e.length;n++)e[n](t)},Wr=e=>{const t=parseFloat(e);return isNaN(t)?e:t},Uc=e=>{const t=Pn(e)?Number(e):NaN;return isNaN(t)?e:t},Vc="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",jc=Nc(Vc);function jo(e){return!!e||e===""}function Rc(e,t){if(e.length!==t.length)return!1;let n=!0;for(let r=0;n&&r<e.length;r++)n=Kt(e[r],t[r]);return n}function Kt(e,t){if(e===t)return!0;let n=di(e),r=di(t);if(n||r)return n&&r?e.getTime()===t.getTime():!1;if(n=pi(e),r=pi(t),n||r)return e===t;if(n=lt(e),r=lt(t),n||r)return n&&r?Rc(e,t):!1;if(n=qr(e),r=qr(t),n||r){if(!n||!r)return!1;const s=Object.keys(e).length,i=Object.keys(t).length;if(s!==i)return!1;for(const l in e){const a=e.hasOwnProperty(l),f=t.hasOwnProperty(l);if(a&&!f||!a&&f||!Kt(e[l],t[l]))return!1}}return String(e)===String(t)}function ws(e,t){return e.findIndex(n=>Kt(n,t))}const Hc="http://www.w3.org/2000/svg",Ht=typeof document<"u"?document:null,hi=Ht&&Ht.createElement("template"),$c={insert:(e,t,n)=>{t.insertBefore(e,n||null)},remove:e=>{const t=e.parentNode;t&&t.removeChild(e)},createElement:(e,t,n,r)=>{const s=t?Ht.createElementNS(Hc,e):Ht.createElement(e,n?{is:n}:void 0);return e==="select"&&r&&r.multiple!=null&&s.setAttribute("multiple",r.multiple),s},createText:e=>Ht.createTextNode(e),createComment:e=>Ht.createComment(e),setText:(e,t)=>{e.nodeValue=t},setElementText:(e,t)=>{e.textContent=t},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>Ht.querySelector(e),setScopeId(e,t){e.setAttribute(t,"")},insertStaticContent(e,t,n,r,s,i){const l=n?n.previousSibling:t.lastChild;if(s&&(s===i||s.nextSibling))for(;t.insertBefore(s.cloneNode(!0),n),!(s===i||!(s=s.nextSibling)););else{hi.innerHTML=r?`<svg>${e}</svg>`:e;const a=hi.content;if(r){const f=a.firstChild;for(;f.firstChild;)a.appendChild(f.firstChild);a.removeChild(f)}t.insertBefore(a,n)}return[l?l.nextSibling:t.firstChild,n?n.previousSibling:t.lastChild]}};function Bc(e,t,n){const r=e._vtc;r&&(t=(t?[t,...r]:[...r]).join(" ")),t==null?e.removeAttribute("class"):n?e.setAttribute("class",t):e.className=t}function zc(e,t,n){const r=e.style,s=Pn(n);if(n&&!s){if(t&&!Pn(t))for(const i in t)n[i]==null&&Yr(r,i,"");for(const i in n)Yr(r,i,n[i])}else{const i=r.display;s?t!==n&&(r.cssText=n):t&&e.removeAttribute("style"),"_vod"in e&&(r.display=i)}}const gi=/\s*!important$/;function Yr(e,t,n){if(lt(n))n.forEach(r=>Yr(e,t,r));else if(n==null&&(n=""),t.startsWith("--"))e.setProperty(t,n);else{const r=Kc(e,t);gi.test(n)?e.setProperty(Cs(r),n.replace(gi,""),"important"):e[r]=n}}const mi=["Webkit","Moz","ms"],kr={};function Kc(e,t){const n=kr[t];if(n)return n;let r=dt(t);if(r!=="filter"&&r in e)return kr[t]=r;r=Ic(r);for(let s=0;s<mi.length;s++){const i=mi[s]+r;if(i in e)return kr[t]=i}return t}const vi="http://www.w3.org/1999/xlink";function qc(e,t,n,r,s){if(r&&t.startsWith("xlink:"))n==null?e.removeAttributeNS(vi,t.slice(6,t.length)):e.setAttributeNS(vi,t,n);else{const i=jc(t);n==null||i&&!jo(n)?e.removeAttribute(t):e.setAttribute(t,i?"":n)}}function Wc(e,t,n,r,s,i,l){if(t==="innerHTML"||t==="textContent"){r&&l(r,s,i),e[t]=n??"";return}const a=e.tagName;if(t==="value"&&a!=="PROGRESS"&&!a.includes("-")){e._value=n;const p=a==="OPTION"?e.getAttribute("value"):e.value,m=n??"";p!==m&&(e.value=m),n==null&&e.removeAttribute(t);return}let f=!1;if(n===""||n==null){const p=typeof e[t];p==="boolean"?n=jo(n):n==null&&p==="string"?(n="",f=!0):p==="number"&&(n=0,f=!0)}try{e[t]=n}catch{}f&&e.removeAttribute(t)}function xt(e,t,n,r){e.addEventListener(t,n,r)}function Yc(e,t,n,r){e.removeEventListener(t,n,r)}function Jc(e,t,n,r,s=null){const i=e._vei||(e._vei={}),l=i[t];if(r&&l)l.value=r;else{const[a,f]=Xc(t);if(r){const p=i[t]=Gc(r,s);xt(e,a,p,f)}else l&&(Yc(e,a,l,f),i[t]=void 0)}}const bi=/(?:Once|Passive|Capture)$/;function Xc(e){let t;if(bi.test(e)){t={};let r;for(;r=e.match(bi);)e=e.slice(0,e.length-r[0].length),t[r[0].toLowerCase()]=!0}return[e[2]===":"?e.slice(3):Cs(e.slice(2)),t]}let Fr=0;const Zc=Promise.resolve(),Qc=()=>Fr||(Zc.then(()=>Fr=0),Fr=Date.now());function Gc(e,t){const n=r=>{if(!r._vts)r._vts=Date.now();else if(r._vts<=n.attached)return;tt(eu(r,n.value),t,5,[r])};return n.value=e,n.attached=Qc(),n}function eu(e,t){if(lt(t)){const n=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{n.call(e),e._stopped=!0},t.map(r=>s=>!s._stopped&&r&&r(s))}else return t}const yi=/^on[a-z]/,tu=(e,t,n,r,s=!1,i,l,a,f)=>{t==="class"?Bc(e,r,s):t==="style"?zc(e,n,r):Oc(t)?kc(t)||Jc(e,t,n,r,l):(t[0]==="."?(t=t.slice(1),!0):t[0]==="^"?(t=t.slice(1),!1):nu(e,t,r,s))?Wc(e,t,r,i,l,a,f):(t==="true-value"?e._trueValue=r:t==="false-value"&&(e._falseValue=r),qc(e,t,r,s))};function nu(e,t,n,r){return r?!!(t==="innerHTML"||t==="textContent"||t in e&&yi.test(t)&&Do(n)):t==="spellcheck"||t==="draggable"||t==="translate"||t==="form"||t==="list"&&e.tagName==="INPUT"||t==="type"&&e.tagName==="TEXTAREA"||yi.test(t)&&Pn(n)?!1:t in e}const St="transition",un="animation",Ro=(e,{slots:t})=>Sc(Ia,$o(e),t);Ro.displayName="Transition";const Ho={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},ru=Ro.props=hr({},po,Ho),Vt=(e,t=[])=>{lt(e)?e.forEach(n=>n(...t)):e&&e(...t)},xi=e=>e?lt(e)?e.some(t=>t.length>1):e.length>1:!1;function $o(e){const t={};for(const V in e)V in Ho||(t[V]=e[V]);if(e.css===!1)return t;const{name:n="v",type:r,duration:s,enterFromClass:i=`${n}-enter-from`,enterActiveClass:l=`${n}-enter-active`,enterToClass:a=`${n}-enter-to`,appearFromClass:f=i,appearActiveClass:p=l,appearToClass:m=a,leaveFromClass:b=`${n}-leave-from`,leaveActiveClass:y=`${n}-leave-active`,leaveToClass:M=`${n}-leave-to`}=e,_=su(s),C=_&&_[0],k=_&&_[1],{onBeforeEnter:K,onEnter:q,onEnterCancelled:ue,onLeave:z,onLeaveCancelled:X,onBeforeAppear:de=K,onAppear:ie=q,onAppearCancelled:j=ue}=t,U=(V,ce,me)=>{Tt(V,ce?m:a),Tt(V,ce?p:l),me&&me()},ne=(V,ce)=>{V._isLeaving=!1,Tt(V,b),Tt(V,M),Tt(V,y),ce&&ce()},G=V=>(ce,me)=>{const ee=V?ie:q,le=()=>U(ce,V,me);Vt(ee,[ce,le]),_i(()=>{Tt(ce,V?f:i),bt(ce,V?m:a),xi(ee)||Ci(ce,r,C,le)})};return hr(t,{onBeforeEnter(V){Vt(K,[V]),bt(V,i),bt(V,l)},onBeforeAppear(V){Vt(de,[V]),bt(V,f),bt(V,p)},onEnter:G(!1),onAppear:G(!0),onLeave(V,ce){V._isLeaving=!0;const me=()=>ne(V,ce);bt(V,b),zo(),bt(V,y),_i(()=>{V._isLeaving&&(Tt(V,b),bt(V,M),xi(z)||Ci(V,r,k,me))}),Vt(z,[V,me])},onEnterCancelled(V){U(V,!1),Vt(ue,[V])},onAppearCancelled(V){U(V,!0),Vt(j,[V])},onLeaveCancelled(V){ne(V),Vt(X,[V])}})}function su(e){if(e==null)return null;if(qr(e))return[Lr(e.enter),Lr(e.leave)];{const t=Lr(e);return[t,t]}}function Lr(e){return Uc(e)}function bt(e,t){t.split(/\s+/).forEach(n=>n&&e.classList.add(n)),(e._vtc||(e._vtc=new Set)).add(t)}function Tt(e,t){t.split(/\s+/).forEach(r=>r&&e.classList.remove(r));const{_vtc:n}=e;n&&(n.delete(t),n.size||(e._vtc=void 0))}function _i(e){requestAnimationFrame(()=>{requestAnimationFrame(e)})}let iu=0;function Ci(e,t,n,r){const s=e._endId=++iu,i=()=>{s===e._endId&&r()};if(n)return setTimeout(i,n);const{type:l,timeout:a,propCount:f}=Bo(e,t);if(!l)return r();const p=l+"end";let m=0;const b=()=>{e.removeEventListener(p,y),i()},y=M=>{M.target===e&&++m>=f&&b()};setTimeout(()=>{m<f&&b()},a+1),e.addEventListener(p,y)}function Bo(e,t){const n=window.getComputedStyle(e),r=_=>(n[_]||"").split(", "),s=r(`${St}Delay`),i=r(`${St}Duration`),l=wi(s,i),a=r(`${un}Delay`),f=r(`${un}Duration`),p=wi(a,f);let m=null,b=0,y=0;t===St?l>0&&(m=St,b=l,y=i.length):t===un?p>0&&(m=un,b=p,y=f.length):(b=Math.max(l,p),m=b>0?l>p?St:un:null,y=m?m===St?i.length:f.length:0);const M=m===St&&/\b(transform|all)(,|$)/.test(r(`${St}Property`).toString());return{type:m,timeout:b,propCount:y,hasTransform:M}}function wi(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max(...t.map((n,r)=>Ei(n)+Ei(e[r])))}function Ei(e){return Number(e.slice(0,-1).replace(",","."))*1e3}function zo(){return document.body.offsetHeight}const Ko=new WeakMap,qo=new WeakMap,Wo={name:"TransitionGroup",props:hr({},ru,{tag:String,moveClass:String}),setup(e,{slots:t}){const n=xs(),r=fo();let s,i;return mo(()=>{if(!s.length)return;const l=e.moveClass||`${e.name||"v"}-move`;if(!uu(s[0].el,n.vnode.el,l))return;s.forEach(lu),s.forEach(au);const a=s.filter(cu);zo(),a.forEach(f=>{const p=f.el,m=p.style;bt(p,l),m.transform=m.webkitTransform=m.transitionDuration="";const b=p._moveCb=y=>{y&&y.target!==p||(!y||/transform$/.test(y.propertyName))&&(p.removeEventListener("transitionend",b),p._moveCb=null,Tt(p,l))};p.addEventListener("transitionend",b)})}),()=>{const l=pe(e),a=$o(l);let f=l.tag||Ge;s=i,i=t.default?fs(t.default()):[];for(let p=0;p<i.length;p++){const m=i[p];m.key!=null&&wn(m,Cn(m,a,r,n))}if(s)for(let p=0;p<s.length;p++){const m=s[p];wn(m,Cn(m,a,r,n)),Ko.set(m,m.el.getBoundingClientRect())}return qe(f,null,i)}}},ou=e=>delete e.mode;Wo.props;const Zu=Wo;function lu(e){const t=e.el;t._moveCb&&t._moveCb(),t._enterCb&&t._enterCb()}function au(e){qo.set(e,e.el.getBoundingClientRect())}function cu(e){const t=Ko.get(e),n=qo.get(e),r=t.left-n.left,s=t.top-n.top;if(r||s){const i=e.el.style;return i.transform=i.webkitTransform=`translate(${r}px,${s}px)`,i.transitionDuration="0s",e}}function uu(e,t,n){const r=e.cloneNode();e._vtc&&e._vtc.forEach(l=>{l.split(/\s+/).forEach(a=>a&&r.classList.remove(a))}),n.split(/\s+/).forEach(l=>l&&r.classList.add(l)),r.style.display="none";const s=t.nodeType===1?t:t.parentNode;s.appendChild(r);const{hasTransform:i}=Bo(r);return s.removeChild(r),i}const Ft=e=>{const t=e.props["onUpdate:modelValue"]||!1;return lt(t)?n=>Dc(t,n):t};function fu(e){e.target.composing=!0}function Si(e){const t=e.target;t.composing&&(t.composing=!1,t.dispatchEvent(new Event("input")))}const Qu={created(e,{modifiers:{lazy:t,trim:n,number:r}},s){e._assign=Ft(s);const i=r||s.props&&s.props.type==="number";xt(e,t?"change":"input",l=>{if(l.target.composing)return;let a=e.value;n&&(a=a.trim()),i&&(a=Wr(a)),e._assign(a)}),n&&xt(e,"change",()=>{e.value=e.value.trim()}),t||(xt(e,"compositionstart",fu),xt(e,"compositionend",Si),xt(e,"change",Si))},mounted(e,{value:t}){e.value=t??""},beforeUpdate(e,{value:t,modifiers:{lazy:n,trim:r,number:s}},i){if(e._assign=Ft(i),e.composing||document.activeElement===e&&e.type!=="range"&&(n||r&&e.value.trim()===t||(s||e.type==="number")&&Wr(e.value)===t))return;const l=t??"";e.value!==l&&(e.value=l)}},Gu={deep:!0,created(e,t,n){e._assign=Ft(n),xt(e,"change",()=>{const r=e._modelValue,s=nn(e),i=e.checked,l=e._assign;if(lt(r)){const a=ws(r,s),f=a!==-1;if(i&&!f)l(r.concat(s));else if(!i&&f){const p=[...r];p.splice(a,1),l(p)}}else if(gr(r)){const a=new Set(r);i?a.add(s):a.delete(s),l(a)}else l(Yo(e,i))})},mounted:Pi,beforeUpdate(e,t,n){e._assign=Ft(n),Pi(e,t,n)}};function Pi(e,{value:t,oldValue:n},r){e._modelValue=t,lt(t)?e.checked=ws(t,r.props.value)>-1:gr(t)?e.checked=t.has(r.props.value):t!==n&&(e.checked=Kt(t,Yo(e,!0)))}const ef={created(e,{value:t},n){e.checked=Kt(t,n.props.value),e._assign=Ft(n),xt(e,"change",()=>{e._assign(nn(e))})},beforeUpdate(e,{value:t,oldValue:n},r){e._assign=Ft(r),t!==n&&(e.checked=Kt(t,r.props.value))}},tf={deep:!0,created(e,{value:t,modifiers:{number:n}},r){const s=gr(t);xt(e,"change",()=>{const i=Array.prototype.filter.call(e.options,l=>l.selected).map(l=>n?Wr(nn(l)):nn(l));e._assign(e.multiple?s?new Set(i):i:i[0])}),e._assign=Ft(r)},mounted(e,{value:t}){Ti(e,t)},beforeUpdate(e,t,n){e._assign=Ft(n)},updated(e,{value:t}){Ti(e,t)}};function Ti(e,t){const n=e.multiple;if(!(n&&!lt(t)&&!gr(t))){for(let r=0,s=e.options.length;r<s;r++){const i=e.options[r],l=nn(i);if(n)lt(t)?i.selected=ws(t,l)>-1:i.selected=t.has(l);else if(Kt(nn(i),t)){e.selectedIndex!==r&&(e.selectedIndex=r);return}}!n&&e.selectedIndex!==-1&&(e.selectedIndex=-1)}}function nn(e){return"_value"in e?e._value:e.value}function Yo(e,t){const n=t?"_trueValue":"_falseValue";return n in e?e[n]:t}const du=["ctrl","shift","alt","meta"],pu={stop:e=>e.stopPropagation(),prevent:e=>e.preventDefault(),self:e=>e.target!==e.currentTarget,ctrl:e=>!e.ctrlKey,shift:e=>!e.shiftKey,alt:e=>!e.altKey,meta:e=>!e.metaKey,left:e=>"button"in e&&e.button!==0,middle:e=>"button"in e&&e.button!==1,right:e=>"button"in e&&e.button!==2,exact:(e,t)=>du.some(n=>e[`${n}Key`]&&!t.includes(n))},nf=(e,t)=>(n,...r)=>{for(let s=0;s<t.length;s++){const i=pu[t[s]];if(i&&i(n,t))return}return e(n,...r)},hu={esc:"escape",space:" ",up:"arrow-up",left:"arrow-left",right:"arrow-right",down:"arrow-down",delete:"backspace"},rf=(e,t)=>n=>{if(!("key"in n))return;const r=Cs(n.key);if(t.some(s=>s===r||hu[s]===r))return e(n)},sf={beforeMount(e,{value:t},{transition:n}){e._vod=e.style.display==="none"?"":e.style.display,n&&t?n.beforeEnter(e):fn(e,t)},mounted(e,{value:t},{transition:n}){n&&t&&n.enter(e)},updated(e,{value:t,oldValue:n},{transition:r}){!t!=!n&&(r?t?(r.beforeEnter(e),fn(e,!0),r.enter(e)):r.leave(e,()=>{fn(e,!1)}):fn(e,t))},beforeUnmount(e,{value:t}){fn(e,t)}};function fn(e,t){e.style.display=t?e._vod:"none"}const gu=hr({patchProp:tu},$c);let Ai;function mu(){return Ai||(Ai=lc(gu))}const of=(...e)=>{const t=mu().createApp(...e),{mount:n}=t;return t.mount=r=>{const s=vu(r);if(!s)return;const i=t._component;!Do(i)&&!i.render&&!i.template&&(i.template=s.innerHTML),s.innerHTML="";const l=n(s,!1,s instanceof SVGElement);return s instanceof Element&&(s.removeAttribute("v-cloak"),s.setAttribute("data-v-app","")),l},t};function vu(e){return Pn(e)?document.querySelector(e):e}const bu=(e,t)=>{const n=e.__vccOpts||e;for(const[r,s]of t)n[r]=s;return n},yu={props:{label:{type:String,default:"Color"},color:{type:String,default:"#ffffff"}},data(){var e=this.getHexColorDisplayValueText(this.color);return{selectedColor:this.color,selectedColorHex:e}},watch:{color(e){this.selectedColor=e,this.setHexColorDisplay(e)}},methods:{getHexColorDisplayValueText(e){if(e=="revert-layer"||e=="none"||e=="currentColor")return"";if(e=="rgb(0 0 0 / 0%)")return"transparent";if(e.includes("rgb")||e.includes("rgba")){var t=mw.color.rgbOrRgbaToHex(e);return t=="#00000000"?"":t}return e},setHexColorDisplay(e){this.selectedColorHex=this.getHexColorDisplayValueText(e)},handleColorChange(e){const t=e.target.value;this.selectedColor=t,this.setHexColorDisplay(t),this.$emit("change",t)},resetColor(){this.selectedColor="",this.$emit("change",this.selectedColor)},togglePicker(){let e=this.$refs.colorPickerElement;mw.app.colorPicker.openColorPicker(this.selectedColor,t=>{this.$props.color=t,this.selectedColor=t,this.$emit("change",this.$props.color)},e)}}},xu={class:"form-control-live-edit-label-wrapper my-4 d-flex align-items-center gap-2"},_u={class:"live-edit-label px-0 col-4"},Cu={class:"mw-field-color-indicator"},wu=["value"],Eu=["value"],Su=rt("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"currentColor",height:"16",viewBox:"0 -960 960 960",width:"16"},[rt("path",{d:"M440-122q-121-15-200.5-105.5T160-440q0-66 26-126.5T260-672l57 57q-38 34-57.5 79T240-440q0 88 56 155.5T440-202v80Zm80 0v-80q87-16 143.5-83T720-440q0-100-70-170t-170-70h-3l44 44-56 56-140-140 140-140 56 56-44 44h3q134 0 227 93t93 227q0 121-79.5 211.5T520-122Z"})],-1),Pu=[Su];function Tu(e,t,n,r,s,i){return fr(),No("div",xu,[rt("label",_u,Il(n.label),1),rt("div",{class:"mw-field mw-field-flat","data-size":"medium",onClick:t[5]||(t[5]=(...l)=>i.togglePicker&&i.togglePicker(...l))},[rt("span",Cu,[rt("span",{ref:"colorPickerElement",onClick:t[0]||(t[0]=(...l)=>i.togglePicker&&i.togglePicker(...l)),class:"mw-field-color-indicator-display",style:Tn({backgroundColor:s.selectedColor})},null,4)]),rt("input",{readonly:"",onClick:t[1]||(t[1]=(...l)=>i.togglePicker&&i.togglePicker(...l)),type:"hidden",class:"colorField unit ready mw-color-picker-field",value:s.selectedColor,onInput:t[2]||(t[2]=(...l)=>i.handleColorChange&&i.handleColorChange(...l)),autocomplete:"off",placeholder:"#ffffff"},null,40,wu),rt("input",{style:{"margin-left":"25px"},readonly:"",class:"colorField unit ready mw-color-picker-field",onClick:t[3]||(t[3]=(...l)=>i.togglePicker&&i.togglePicker(...l)),ref:"colorHex",value:s.selectedColorHex},null,8,Eu),rt("span",{class:"reset-field tip mw-action-buttons-background-circle-on-hover","data-tipposition":"top-right","data-tip":"Restore default value",onClick:t[4]||(t[4]=(...l)=>i.resetColor&&i.resetColor(...l))},Pu)])])}const lf=bu(yu,[["render",Tu]]);function Hn(e){return[null,void 0,!1].indexOf(e)!==-1}function Au(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function Jo(e){var t={exports:{}};return e(t,t.exports),t.exports}var Ni=Jo(function(e,t){e.exports=function(){var n=["decimals","thousand","mark","prefix","suffix","encoder","decoder","negativeBefore","negative","edit","undo"];function r(_){return _.split("").reverse().join("")}function s(_,C){return _.substring(0,C.length)===C}function i(_,C){return _.slice(-1*C.length)===C}function l(_,C,k){if((_[C]||_[k])&&_[C]===_[k])throw new Error(C)}function a(_){return typeof _=="number"&&isFinite(_)}function f(_,C){return _=_.toString().split("e"),(+((_=(_=Math.round(+(_[0]+"e"+(_[1]?+_[1]+C:C)))).toString().split("e"))[0]+"e"+(_[1]?+_[1]-C:-C))).toFixed(C)}function p(_,C,k,K,q,ue,z,X,de,ie,j,U){var ne,G,V,ce=U,me="",ee="";return ue&&(U=ue(U)),!!a(U)&&(_!==!1&&parseFloat(U.toFixed(_))===0&&(U=0),U<0&&(ne=!0,U=Math.abs(U)),_!==!1&&(U=f(U,_)),(U=U.toString()).indexOf(".")!==-1?(V=(G=U.split("."))[0],k&&(me=k+G[1])):V=U,C&&(V=r(V).match(/.{1,3}/g),V=r(V.join(r(C)))),ne&&X&&(ee+=X),K&&(ee+=K),ne&&de&&(ee+=de),ee+=V,ee+=me,q&&(ee+=q),ie&&(ee=ie(ee,ce)),ee)}function m(_,C,k,K,q,ue,z,X,de,ie,j,U){var ne,G="";return j&&(U=j(U)),!(!U||typeof U!="string")&&(X&&s(U,X)&&(U=U.replace(X,""),ne=!0),K&&s(U,K)&&(U=U.replace(K,"")),de&&s(U,de)&&(U=U.replace(de,""),ne=!0),q&&i(U,q)&&(U=U.slice(0,-1*q.length)),C&&(U=U.split(C).join("")),k&&(U=U.replace(k,".")),ne&&(G+="-"),(G=(G+=U).replace(/[^0-9\.\-.]/g,""))!==""&&(G=Number(G),z&&(G=z(G)),!!a(G)&&G))}function b(_){var C,k,K,q={};for(_.suffix===void 0&&(_.suffix=_.postfix),C=0;C<n.length;C+=1)if((K=_[k=n[C]])===void 0)k!=="negative"||q.negativeBefore?k==="mark"&&q.thousand!=="."?q[k]=".":q[k]=!1:q[k]="-";else if(k==="decimals"){if(!(K>=0&&K<8))throw new Error(k);q[k]=K}else if(k==="encoder"||k==="decoder"||k==="edit"||k==="undo"){if(typeof K!="function")throw new Error(k);q[k]=K}else{if(typeof K!="string")throw new Error(k);q[k]=K}return l(q,"mark","thousand"),l(q,"prefix","negative"),l(q,"prefix","negativeBefore"),q}function y(_,C,k){var K,q=[];for(K=0;K<n.length;K+=1)q.push(_[n[K]]);return q.push(k),C.apply("",q)}function M(_){if(!(this instanceof M))return new M(_);typeof _=="object"&&(_=b(_),this.to=function(C){return y(_,p,C)},this.from=function(C){return y(_,m,C)})}return M}()}),Nu=Au(Jo(function(e,t){(function(n){function r(c){return s(c)&&typeof c.from=="function"}function s(c){return typeof c=="object"&&typeof c.to=="function"}function i(c){c.parentElement.removeChild(c)}function l(c){return c!=null}function a(c){c.preventDefault()}function f(c){return c.filter(function(o){return!this[o]&&(this[o]=!0)},{})}function p(c,o){return Math.round(c/o)*o}function m(c,o){var T=c.getBoundingClientRect(),H=c.ownerDocument,O=H.documentElement,J=ue(H);return/webkit.*Chrome.*Mobile/i.test(navigator.userAgent)&&(J.x=0),o?T.top+J.y-O.clientTop:T.left+J.x-O.clientLeft}function b(c){return typeof c=="number"&&!isNaN(c)&&isFinite(c)}function y(c,o,T){T>0&&(k(c,o),setTimeout(function(){K(c,o)},T))}function M(c){return Math.max(Math.min(c,100),0)}function _(c){return Array.isArray(c)?c:[c]}function C(c){var o=(c=String(c)).split(".");return o.length>1?o[1].length:0}function k(c,o){c.classList&&!/\s/.test(o)?c.classList.add(o):c.className+=" "+o}function K(c,o){c.classList&&!/\s/.test(o)?c.classList.remove(o):c.className=c.className.replace(new RegExp("(^|\\b)"+o.split(" ").join("|")+"(\\b|$)","gi")," ")}function q(c,o){return c.classList?c.classList.contains(o):new RegExp("\\b"+o+"\\b").test(c.className)}function ue(c){var o=window.pageXOffset!==void 0,T=(c.compatMode||"")==="CSS1Compat";return{x:o?window.pageXOffset:T?c.documentElement.scrollLeft:c.body.scrollLeft,y:o?window.pageYOffset:T?c.documentElement.scrollTop:c.body.scrollTop}}function z(){return window.navigator.pointerEnabled?{start:"pointerdown",move:"pointermove",end:"pointerup"}:window.navigator.msPointerEnabled?{start:"MSPointerDown",move:"MSPointerMove",end:"MSPointerUp"}:{start:"mousedown touchstart",move:"mousemove touchmove",end:"mouseup touchend"}}function X(){var c=!1;try{var o=Object.defineProperty({},"passive",{get:function(){c=!0}});window.addEventListener("test",null,o)}catch{}return c}function de(){return window.CSS&&CSS.supports&&CSS.supports("touch-action","none")}function ie(c,o){return 100/(o-c)}function j(c,o,T){return 100*o/(c[T+1]-c[T])}function U(c,o){return j(c,c[0]<0?o+Math.abs(c[0]):o-c[0],0)}function ne(c,o){return o*(c[1]-c[0])/100+c[0]}function G(c,o){for(var T=1;c>=o[T];)T+=1;return T}function V(c,o,T){if(T>=c.slice(-1)[0])return 100;var H=G(T,c),O=c[H-1],J=c[H],re=o[H-1],ge=o[H];return re+U([O,J],T)/ie(re,ge)}function ce(c,o,T){if(T>=100)return c.slice(-1)[0];var H=G(T,o),O=c[H-1],J=c[H],re=o[H-1];return ne([O,J],(T-re)*ie(re,o[H]))}function me(c,o,T,H){if(H===100)return H;var O=G(H,c),J=c[O-1],re=c[O];return T?H-J>(re-J)/2?re:J:o[O-1]?c[O-1]+p(H-c[O-1],o[O-1]):H}var ee,le;n.PipsMode=void 0,(le=n.PipsMode||(n.PipsMode={})).Range="range",le.Steps="steps",le.Positions="positions",le.Count="count",le.Values="values",n.PipsType=void 0,(ee=n.PipsType||(n.PipsType={}))[ee.None=-1]="None",ee[ee.NoValue=0]="NoValue",ee[ee.LargeValue=1]="LargeValue",ee[ee.SmallValue=2]="SmallValue";var ve=function(){function c(o,T,H){var O;this.xPct=[],this.xVal=[],this.xSteps=[],this.xNumSteps=[],this.xHighestCompleteStep=[],this.xSteps=[H||!1],this.xNumSteps=[!1],this.snap=T;var J=[];for(Object.keys(o).forEach(function(re){J.push([_(o[re]),re])}),J.sort(function(re,ge){return re[0][0]-ge[0][0]}),O=0;O<J.length;O++)this.handleEntryPoint(J[O][1],J[O][0]);for(this.xNumSteps=this.xSteps.slice(0),O=0;O<this.xNumSteps.length;O++)this.handleStepPoint(O,this.xNumSteps[O])}return c.prototype.getDistance=function(o){for(var T=[],H=0;H<this.xNumSteps.length-1;H++)T[H]=j(this.xVal,o,H);return T},c.prototype.getAbsoluteDistance=function(o,T,H){var O,J=0;if(o<this.xPct[this.xPct.length-1])for(;o>this.xPct[J+1];)J++;else o===this.xPct[this.xPct.length-1]&&(J=this.xPct.length-2);H||o!==this.xPct[J+1]||J++,T===null&&(T=[]);var re=1,ge=T[J],Se=0,ht=0,Ue=0,te=0;for(O=H?(o-this.xPct[J])/(this.xPct[J+1]-this.xPct[J]):(this.xPct[J+1]-o)/(this.xPct[J+1]-this.xPct[J]);ge>0;)Se=this.xPct[J+1+te]-this.xPct[J+te],T[J+te]*re+100-100*O>100?(ht=Se*O,re=(ge-100*O)/T[J+te],O=1):(ht=T[J+te]*Se/100*re,re=0),H?(Ue-=ht,this.xPct.length+te>=1&&te--):(Ue+=ht,this.xPct.length-te>=1&&te++),ge=T[J+te]*re;return o+Ue},c.prototype.toStepping=function(o){return o=V(this.xVal,this.xPct,o)},c.prototype.fromStepping=function(o){return ce(this.xVal,this.xPct,o)},c.prototype.getStep=function(o){return o=me(this.xPct,this.xSteps,this.snap,o)},c.prototype.getDefaultStep=function(o,T,H){var O=G(o,this.xPct);return(o===100||T&&o===this.xPct[O-1])&&(O=Math.max(O-1,1)),(this.xVal[O]-this.xVal[O-1])/H},c.prototype.getNearbySteps=function(o){var T=G(o,this.xPct);return{stepBefore:{startValue:this.xVal[T-2],step:this.xNumSteps[T-2],highestStep:this.xHighestCompleteStep[T-2]},thisStep:{startValue:this.xVal[T-1],step:this.xNumSteps[T-1],highestStep:this.xHighestCompleteStep[T-1]},stepAfter:{startValue:this.xVal[T],step:this.xNumSteps[T],highestStep:this.xHighestCompleteStep[T]}}},c.prototype.countStepDecimals=function(){var o=this.xNumSteps.map(C);return Math.max.apply(null,o)},c.prototype.hasNoSize=function(){return this.xVal[0]===this.xVal[this.xVal.length-1]},c.prototype.convert=function(o){return this.getStep(this.toStepping(o))},c.prototype.handleEntryPoint=function(o,T){var H;if(!b(H=o==="min"?0:o==="max"?100:parseFloat(o))||!b(T[0]))throw new Error("noUiSlider: 'range' value isn't numeric.");this.xPct.push(H),this.xVal.push(T[0]);var O=Number(T[1]);H?this.xSteps.push(!isNaN(O)&&O):isNaN(O)||(this.xSteps[0]=O),this.xHighestCompleteStep.push(0)},c.prototype.handleStepPoint=function(o,T){if(T)if(this.xVal[o]!==this.xVal[o+1]){this.xSteps[o]=j([this.xVal[o],this.xVal[o+1]],T,0)/ie(this.xPct[o],this.xPct[o+1]);var H=(this.xVal[o+1]-this.xVal[o])/this.xNumSteps[o],O=Math.ceil(Number(H.toFixed(3))-1),J=this.xVal[o]+this.xNumSteps[o]*O;this.xHighestCompleteStep[o]=J}else this.xSteps[o]=this.xHighestCompleteStep[o]=this.xVal[o]},c}(),fe={to:function(c){return c===void 0?"":c.toFixed(2)},from:Number},Ee={target:"target",base:"base",origin:"origin",handle:"handle",handleLower:"handle-lower",handleUpper:"handle-upper",touchArea:"touch-area",horizontal:"horizontal",vertical:"vertical",background:"background",connect:"connect",connects:"connects",ltr:"ltr",rtl:"rtl",textDirectionLtr:"txt-dir-ltr",textDirectionRtl:"txt-dir-rtl",draggable:"draggable",drag:"state-drag",tap:"state-tap",active:"active",tooltip:"tooltip",pips:"pips",pipsHorizontal:"pips-horizontal",pipsVertical:"pips-vertical",marker:"marker",markerHorizontal:"marker-horizontal",markerVertical:"marker-vertical",markerNormal:"marker-normal",markerLarge:"marker-large",markerSub:"marker-sub",value:"value",valueHorizontal:"value-horizontal",valueVertical:"value-vertical",valueNormal:"value-normal",valueLarge:"value-large",valueSub:"value-sub"},Ce={tooltips:".__tooltips",aria:".__aria"};function Oe(c,o){if(!b(o))throw new Error("noUiSlider: 'step' is not numeric.");c.singleStep=o}function ke(c,o){if(!b(o))throw new Error("noUiSlider: 'keyboardPageMultiplier' is not numeric.");c.keyboardPageMultiplier=o}function at(c,o){if(!b(o))throw new Error("noUiSlider: 'keyboardMultiplier' is not numeric.");c.keyboardMultiplier=o}function pt(c,o){if(!b(o))throw new Error("noUiSlider: 'keyboardDefaultStep' is not numeric.");c.keyboardDefaultStep=o}function De(c,o){if(typeof o!="object"||Array.isArray(o))throw new Error("noUiSlider: 'range' is not an object.");if(o.min===void 0||o.max===void 0)throw new Error("noUiSlider: Missing 'min' or 'max' in 'range'.");c.spectrum=new ve(o,c.snap||!1,c.singleStep)}function B(c,o){if(o=_(o),!Array.isArray(o)||!o.length)throw new Error("noUiSlider: 'start' option is incorrect.");c.handles=o.length,c.start=o}function _e(c,o){if(typeof o!="boolean")throw new Error("noUiSlider: 'snap' option must be a boolean.");c.snap=o}function on(c,o){if(typeof o!="boolean")throw new Error("noUiSlider: 'animate' option must be a boolean.");c.animate=o}function wt(c,o){if(typeof o!="number")throw new Error("noUiSlider: 'animationDuration' option must be a number.");c.animationDuration=o}function ln(c,o){var T,H=[!1];if(o==="lower"?o=[!0,!1]:o==="upper"&&(o=[!1,!0]),o===!0||o===!1){for(T=1;T<c.handles;T++)H.push(o);H.push(!1)}else{if(!Array.isArray(o)||!o.length||o.length!==c.handles+1)throw new Error("noUiSlider: 'connect' option doesn't match handle count.");H=o}c.connect=H}function an(c,o){switch(o){case"horizontal":c.ort=0;break;case"vertical":c.ort=1;break;default:throw new Error("noUiSlider: 'orientation' option is invalid.")}}function d(c,o){if(!b(o))throw new Error("noUiSlider: 'margin' option must be numeric.");o!==0&&(c.margin=c.spectrum.getDistance(o))}function h(c,o){if(!b(o))throw new Error("noUiSlider: 'limit' option must be numeric.");if(c.limit=c.spectrum.getDistance(o),!c.limit||c.handles<2)throw new Error("noUiSlider: 'limit' option is only supported on linear sliders with 2 or more handles.")}function x(c,o){var T;if(!b(o)&&!Array.isArray(o))throw new Error("noUiSlider: 'padding' option must be numeric or array of exactly 2 numbers.");if(Array.isArray(o)&&o.length!==2&&!b(o[0])&&!b(o[1]))throw new Error("noUiSlider: 'padding' option must be numeric or array of exactly 2 numbers.");if(o!==0){for(Array.isArray(o)||(o=[o,o]),c.padding=[c.spectrum.getDistance(o[0]),c.spectrum.getDistance(o[1])],T=0;T<c.spectrum.xNumSteps.length-1;T++)if(c.padding[0][T]<0||c.padding[1][T]<0)throw new Error("noUiSlider: 'padding' option must be a positive number(s).");var H=o[0]+o[1],O=c.spectrum.xVal[0];if(H/(c.spectrum.xVal[c.spectrum.xVal.length-1]-O)>1)throw new Error("noUiSlider: 'padding' option must not exceed 100% of the range.")}}function E(c,o){switch(o){case"ltr":c.dir=0;break;case"rtl":c.dir=1;break;default:throw new Error("noUiSlider: 'direction' option was not recognized.")}}function w(c,o){if(typeof o!="string")throw new Error("noUiSlider: 'behaviour' must be a string containing options.");var T=o.indexOf("tap")>=0,H=o.indexOf("drag")>=0,O=o.indexOf("fixed")>=0,J=o.indexOf("snap")>=0,re=o.indexOf("hover")>=0,ge=o.indexOf("unconstrained")>=0,Se=o.indexOf("drag-all")>=0,ht=o.indexOf("smooth-steps")>=0;if(O){if(c.handles!==2)throw new Error("noUiSlider: 'fixed' behaviour must be used with 2 handles");d(c,c.start[1]-c.start[0])}if(ge&&(c.margin||c.limit))throw new Error("noUiSlider: 'unconstrained' behaviour cannot be used with margin or limit");c.events={tap:T||J,drag:H,dragAll:Se,smoothSteps:ht,fixed:O,snap:J,hover:re,unconstrained:ge}}function N(c,o){if(o!==!1)if(o===!0||s(o)){c.tooltips=[];for(var T=0;T<c.handles;T++)c.tooltips.push(o)}else{if((o=_(o)).length!==c.handles)throw new Error("noUiSlider: must pass a formatter for all handles.");o.forEach(function(H){if(typeof H!="boolean"&&!s(H))throw new Error("noUiSlider: 'tooltips' must be passed a formatter or 'false'.")}),c.tooltips=o}}function I(c,o){if(o.length!==c.handles)throw new Error("noUiSlider: must pass a attributes for all handles.");c.handleAttributes=o}function A(c,o){if(!s(o))throw new Error("noUiSlider: 'ariaFormat' requires 'to' method.");c.ariaFormat=o}function F(c,o){if(!r(o))throw new Error("noUiSlider: 'format' requires 'to' and 'from' methods.");c.format=o}function P(c,o){if(typeof o!="boolean")throw new Error("noUiSlider: 'keyboardSupport' option must be a boolean.");c.keyboardSupport=o}function W(c,o){c.documentElement=o}function $(c,o){if(typeof o!="string"&&o!==!1)throw new Error("noUiSlider: 'cssPrefix' must be a string or `false`.");c.cssPrefix=o}function Y(c,o){if(typeof o!="object")throw new Error("noUiSlider: 'cssClasses' must be an object.");typeof c.cssPrefix=="string"?(c.cssClasses={},Object.keys(o).forEach(function(T){c.cssClasses[T]=c.cssPrefix+o[T]})):c.cssClasses=o}function Z(c){var o={margin:null,limit:null,padding:null,animate:!0,animationDuration:300,ariaFormat:fe,format:fe},T={step:{r:!1,t:Oe},keyboardPageMultiplier:{r:!1,t:ke},keyboardMultiplier:{r:!1,t:at},keyboardDefaultStep:{r:!1,t:pt},start:{r:!0,t:B},connect:{r:!0,t:ln},direction:{r:!0,t:E},snap:{r:!1,t:_e},animate:{r:!1,t:on},animationDuration:{r:!1,t:wt},range:{r:!0,t:De},orientation:{r:!1,t:an},margin:{r:!1,t:d},limit:{r:!1,t:h},padding:{r:!1,t:x},behaviour:{r:!0,t:w},ariaFormat:{r:!1,t:A},format:{r:!1,t:F},tooltips:{r:!1,t:N},keyboardSupport:{r:!0,t:P},documentElement:{r:!1,t:W},cssPrefix:{r:!0,t:$},cssClasses:{r:!0,t:Y},handleAttributes:{r:!1,t:I}},H={connect:!1,direction:"ltr",behaviour:"tap",orientation:"horizontal",keyboardSupport:!0,cssPrefix:"noUi-",cssClasses:Ee,keyboardPageMultiplier:5,keyboardMultiplier:1,keyboardDefaultStep:10};c.format&&!c.ariaFormat&&(c.ariaFormat=c.format),Object.keys(T).forEach(function(Se){if(l(c[Se])||H[Se]!==void 0)T[Se].t(o,l(c[Se])?c[Se]:H[Se]);else if(T[Se].r)throw new Error("noUiSlider: '"+Se+"' is required.")}),o.pips=c.pips;var O=document.createElement("div"),J=O.style.msTransform!==void 0,re=O.style.transform!==void 0;o.transformRule=re?"transform":J?"msTransform":"webkitTransform";var ge=[["left","top"],["right","bottom"]];return o.style=ge[o.dir][o.ort],o}function ae(c,o,T){var H,O,J,re,ge,Se=z(),ht=de()&&X(),Ue=c,te=o.spectrum,gt=[],Ne=[],Je=[],mr=0,mt={},qt=c.ownerDocument,An=o.documentElement||qt.documentElement,Nn=qt.body,Go=qt.dir==="rtl"||o.ort===1?0:100;function vt(u,g){var v=qt.createElement("div");return g&&k(v,g),u.appendChild(v),v}function el(u,g){var v=vt(u,o.cssClasses.origin),S=vt(v,o.cssClasses.handle);if(vt(S,o.cssClasses.touchArea),S.setAttribute("data-handle",String(g)),o.keyboardSupport&&(S.setAttribute("tabindex","0"),S.addEventListener("keydown",function(L){return hl(L,g)})),o.handleAttributes!==void 0){var D=o.handleAttributes[g];Object.keys(D).forEach(function(L){S.setAttribute(L,D[L])})}return S.setAttribute("role","slider"),S.setAttribute("aria-orientation",o.ort?"vertical":"horizontal"),g===0?k(S,o.cssClasses.handleLower):g===o.handles-1&&k(S,o.cssClasses.handleUpper),v}function Es(u,g){return!!g&&vt(u,o.cssClasses.connect)}function tl(u,g){var v=vt(g,o.cssClasses.connects);O=[],(J=[]).push(Es(v,u[0]));for(var S=0;S<o.handles;S++)O.push(el(g,S)),Je[S]=S,J.push(Es(v,u[S+1]))}function nl(u){return k(u,o.cssClasses.target),o.dir===0?k(u,o.cssClasses.ltr):k(u,o.cssClasses.rtl),o.ort===0?k(u,o.cssClasses.horizontal):k(u,o.cssClasses.vertical),k(u,getComputedStyle(u).direction==="rtl"?o.cssClasses.textDirectionRtl:o.cssClasses.textDirectionLtr),vt(u,o.cssClasses.base)}function rl(u,g){return!(!o.tooltips||!o.tooltips[g])&&vt(u.firstChild,o.cssClasses.tooltip)}function Ss(){return Ue.hasAttribute("disabled")}function vr(u){return O[u].hasAttribute("disabled")}function br(){ge&&(cn("update"+Ce.tooltips),ge.forEach(function(u){u&&i(u)}),ge=null)}function Ps(){br(),ge=O.map(rl),wr("update"+Ce.tooltips,function(u,g,v){if(ge&&o.tooltips&&ge[g]!==!1){var S=u[g];o.tooltips[g]!==!0&&(S=o.tooltips[g].to(v[g])),ge[g].innerHTML=S}})}function sl(){cn("update"+Ce.aria),wr("update"+Ce.aria,function(u,g,v,S,D){Je.forEach(function(L){var se=O[L],R=Mn(Ne,L,0,!0,!0,!0),Le=Mn(Ne,L,100,!0,!0,!0),Me=D[L],we=String(o.ariaFormat.to(v[L]));R=te.fromStepping(R).toFixed(1),Le=te.fromStepping(Le).toFixed(1),Me=te.fromStepping(Me).toFixed(1),se.children[0].setAttribute("aria-valuemin",R),se.children[0].setAttribute("aria-valuemax",Le),se.children[0].setAttribute("aria-valuenow",Me),se.children[0].setAttribute("aria-valuetext",we)})})}function il(u){if(u.mode===n.PipsMode.Range||u.mode===n.PipsMode.Steps)return te.xVal;if(u.mode===n.PipsMode.Count){if(u.values<2)throw new Error("noUiSlider: 'values' (>= 2) required for mode 'count'.");for(var g=u.values-1,v=100/g,S=[];g--;)S[g]=g*v;return S.push(100),Ts(S,u.stepped)}return u.mode===n.PipsMode.Positions?Ts(u.values,u.stepped):u.mode===n.PipsMode.Values?u.stepped?u.values.map(function(D){return te.fromStepping(te.getStep(te.toStepping(D)))}):u.values:[]}function Ts(u,g){return u.map(function(v){return te.fromStepping(g?te.getStep(v):v)})}function ol(u){function g(Me,we){return Number((Me+we).toFixed(7))}var v=il(u),S={},D=te.xVal[0],L=te.xVal[te.xVal.length-1],se=!1,R=!1,Le=0;return(v=f(v.slice().sort(function(Me,we){return Me-we})))[0]!==D&&(v.unshift(D),se=!0),v[v.length-1]!==L&&(v.push(L),R=!0),v.forEach(function(Me,we){var Ae,xe,Ve,We,Ie,Ds,Pr,Us,Vs,js,Tr=Me,Wt=v[we+1],Rs=u.mode===n.PipsMode.Steps;for(Rs&&(Ae=te.xNumSteps[we]),Ae||(Ae=Wt-Tr),Wt===void 0&&(Wt=Tr),Ae=Math.max(Ae,1e-7),xe=Tr;xe<=Wt;xe=g(xe,Ae)){for(Us=(Ie=(We=te.toStepping(xe))-Le)/(u.density||1),js=Ie/(Vs=Math.round(Us)),Ve=1;Ve<=Vs;Ve+=1)S[(Ds=Le+Ve*js).toFixed(5)]=[te.fromStepping(Ds),0];Pr=v.indexOf(xe)>-1?n.PipsType.LargeValue:Rs?n.PipsType.SmallValue:n.PipsType.NoValue,!we&&se&&xe!==Wt&&(Pr=0),xe===Wt&&R||(S[We.toFixed(5)]=[xe,Pr]),Le=We}}),S}function ll(u,g,v){var S,D,L=qt.createElement("div"),se=((S={})[n.PipsType.None]="",S[n.PipsType.NoValue]=o.cssClasses.valueNormal,S[n.PipsType.LargeValue]=o.cssClasses.valueLarge,S[n.PipsType.SmallValue]=o.cssClasses.valueSub,S),R=((D={})[n.PipsType.None]="",D[n.PipsType.NoValue]=o.cssClasses.markerNormal,D[n.PipsType.LargeValue]=o.cssClasses.markerLarge,D[n.PipsType.SmallValue]=o.cssClasses.markerSub,D),Le=[o.cssClasses.valueHorizontal,o.cssClasses.valueVertical],Me=[o.cssClasses.markerHorizontal,o.cssClasses.markerVertical];function we(xe,Ve){var We=Ve===o.cssClasses.value,Ie=We?se:R;return Ve+" "+(We?Le:Me)[o.ort]+" "+Ie[xe]}function Ae(xe,Ve,We){if((We=g?g(Ve,We):We)!==n.PipsType.None){var Ie=vt(L,!1);Ie.className=we(We,o.cssClasses.marker),Ie.style[o.style]=xe+"%",We>n.PipsType.NoValue&&((Ie=vt(L,!1)).className=we(We,o.cssClasses.value),Ie.setAttribute("data-value",String(Ve)),Ie.style[o.style]=xe+"%",Ie.innerHTML=String(v.to(Ve)))}}return k(L,o.cssClasses.pips),k(L,o.ort===0?o.cssClasses.pipsHorizontal:o.cssClasses.pipsVertical),Object.keys(u).forEach(function(xe){Ae(xe,u[xe][0],u[xe][1])}),L}function yr(){re&&(i(re),re=null)}function xr(u){yr();var g=ol(u),v=u.filter,S=u.format||{to:function(D){return String(Math.round(D))}};return re=Ue.appendChild(ll(g,v,S))}function As(){var u=H.getBoundingClientRect(),g="offset"+["Width","Height"][o.ort];return o.ort===0?u.width||H[g]:u.height||H[g]}function Lt(u,g,v,S){var D=function(se){var R=al(se,S.pageOffset,S.target||g);return!!R&&!(Ss()&&!S.doNotReject)&&!(q(Ue,o.cssClasses.tap)&&!S.doNotReject)&&!(u===Se.start&&R.buttons!==void 0&&R.buttons>1)&&(!S.hover||!R.buttons)&&(ht||R.preventDefault(),R.calcPoint=R.points[o.ort],void v(R,S))},L=[];return u.split(" ").forEach(function(se){g.addEventListener(se,D,!!ht&&{passive:!0}),L.push([se,D])}),L}function al(u,g,v){var S=u.type.indexOf("touch")===0,D=u.type.indexOf("mouse")===0,L=u.type.indexOf("pointer")===0,se=0,R=0;if(u.type.indexOf("MSPointer")===0&&(L=!0),u.type==="mousedown"&&!u.buttons&&!u.touches)return!1;if(S){var Le=function(Ae){var xe=Ae.target;return xe===v||v.contains(xe)||u.composed&&u.composedPath().shift()===v};if(u.type==="touchstart"){var Me=Array.prototype.filter.call(u.touches,Le);if(Me.length>1)return!1;se=Me[0].pageX,R=Me[0].pageY}else{var we=Array.prototype.find.call(u.changedTouches,Le);if(!we)return!1;se=we.pageX,R=we.pageY}}return g=g||ue(qt),(D||L)&&(se=u.clientX+g.x,R=u.clientY+g.y),u.pageOffset=g,u.points=[se,R],u.cursor=D||L,u}function Ns(u){var g=100*(u-m(H,o.ort))/As();return g=M(g),o.dir?100-g:g}function cl(u){var g=100,v=!1;return O.forEach(function(S,D){if(!vr(D)){var L=Ne[D],se=Math.abs(L-u);(se<g||se<=g&&u>L||se===100&&g===100)&&(v=D,g=se)}}),v}function ul(u,g){u.type==="mouseout"&&u.target.nodeName==="HTML"&&u.relatedTarget===null&&_r(u,g)}function fl(u,g){if(navigator.appVersion.indexOf("MSIE 9")===-1&&u.buttons===0&&g.buttonsProperty!==0)return _r(u,g);var v=(o.dir?-1:1)*(u.calcPoint-g.startCalcPoint);Ms(v>0,100*v/g.baseSize,g.locations,g.handleNumbers,g.connect)}function _r(u,g){g.handle&&(K(g.handle,o.cssClasses.active),mr-=1),g.listeners.forEach(function(v){An.removeEventListener(v[0],v[1])}),mr===0&&(K(Ue,o.cssClasses.drag),Sr(),u.cursor&&(Nn.style.cursor="",Nn.removeEventListener("selectstart",a))),o.events.smoothSteps&&(g.handleNumbers.forEach(function(v){It(v,Ne[v],!0,!0,!1,!1)}),g.handleNumbers.forEach(function(v){Fe("update",v)})),g.handleNumbers.forEach(function(v){Fe("change",v),Fe("set",v),Fe("end",v)})}function Cr(u,g){if(!g.handleNumbers.some(vr)){var v;g.handleNumbers.length===1&&(v=O[g.handleNumbers[0]].children[0],mr+=1,k(v,o.cssClasses.active)),u.stopPropagation();var S=[],D=Lt(Se.move,An,fl,{target:u.target,handle:v,connect:g.connect,listeners:S,startCalcPoint:u.calcPoint,baseSize:As(),pageOffset:u.pageOffset,handleNumbers:g.handleNumbers,buttonsProperty:u.buttons,locations:Ne.slice()}),L=Lt(Se.end,An,_r,{target:u.target,handle:v,listeners:S,doNotReject:!0,handleNumbers:g.handleNumbers}),se=Lt("mouseout",An,ul,{target:u.target,handle:v,listeners:S,doNotReject:!0,handleNumbers:g.handleNumbers});S.push.apply(S,D.concat(L,se)),u.cursor&&(Nn.style.cursor=getComputedStyle(u.target).cursor,O.length>1&&k(Ue,o.cssClasses.drag),Nn.addEventListener("selectstart",a,!1)),g.handleNumbers.forEach(function(R){Fe("start",R)})}}function dl(u){u.stopPropagation();var g=Ns(u.calcPoint),v=cl(g);v!==!1&&(o.events.snap||y(Ue,o.cssClasses.tap,o.animationDuration),It(v,g,!0,!0),Sr(),Fe("slide",v,!0),Fe("update",v,!0),o.events.snap?Cr(u,{handleNumbers:[v]}):(Fe("change",v,!0),Fe("set",v,!0)))}function pl(u){var g=Ns(u.calcPoint),v=te.getStep(g),S=te.fromStepping(v);Object.keys(mt).forEach(function(D){D.split(".")[0]==="hover"&&mt[D].forEach(function(L){L.call(kn,S)})})}function hl(u,g){if(Ss()||vr(g))return!1;var v=["Left","Right"],S=["Down","Up"],D=["PageDown","PageUp"],L=["Home","End"];o.dir&&!o.ort?v.reverse():o.ort&&!o.dir&&(S.reverse(),D.reverse());var se,R=u.key.replace("Arrow",""),Le=R===D[0],Me=R===D[1],we=R===S[0]||R===v[0]||Le,Ae=R===S[1]||R===v[1]||Me,xe=R===L[0],Ve=R===L[1];if(!(we||Ae||xe||Ve))return!0;if(u.preventDefault(),Ae||we){var We=we?0:1,Ie=Is(g)[We];if(Ie===null)return!1;Ie===!1&&(Ie=te.getDefaultStep(Ne[g],we,o.keyboardDefaultStep)),Ie*=Me||Le?o.keyboardPageMultiplier:o.keyboardMultiplier,Ie=Math.max(Ie,1e-7),Ie*=we?-1:1,se=gt[g]+Ie}else se=Ve?o.spectrum.xVal[o.spectrum.xVal.length-1]:o.spectrum.xVal[0];return It(g,te.toStepping(se),!0,!0),Fe("slide",g),Fe("update",g),Fe("change",g),Fe("set",g),!1}function gl(u){u.fixed||O.forEach(function(g,v){Lt(Se.start,g.children[0],Cr,{handleNumbers:[v]})}),u.tap&&Lt(Se.start,H,dl,{}),u.hover&&Lt(Se.move,H,pl,{hover:!0}),u.drag&&J.forEach(function(g,v){if(g!==!1&&v!==0&&v!==J.length-1){var S=O[v-1],D=O[v],L=[g],se=[S,D],R=[v-1,v];k(g,o.cssClasses.draggable),u.fixed&&(L.push(S.children[0]),L.push(D.children[0])),u.dragAll&&(se=O,R=Je),L.forEach(function(Le){Lt(Se.start,Le,Cr,{handles:se,handleNumbers:R,connect:g})})}})}function wr(u,g){mt[u]=mt[u]||[],mt[u].push(g),u.split(".")[0]==="update"&&O.forEach(function(v,S){Fe("update",S)})}function ml(u){return u===Ce.aria||u===Ce.tooltips}function cn(u){var g=u&&u.split(".")[0],v=g?u.substring(g.length):u;Object.keys(mt).forEach(function(S){var D=S.split(".")[0],L=S.substring(D.length);g&&g!==D||v&&v!==L||ml(L)&&v!==L||delete mt[S]})}function Fe(u,g,v){Object.keys(mt).forEach(function(S){var D=S.split(".")[0];u===D&&mt[S].forEach(function(L){L.call(kn,gt.map(o.format.to),g,gt.slice(),v||!1,Ne.slice(),kn)})})}function Mn(u,g,v,S,D,L,se){var R;return O.length>1&&!o.events.unconstrained&&(S&&g>0&&(R=te.getAbsoluteDistance(u[g-1],o.margin,!1),v=Math.max(v,R)),D&&g<O.length-1&&(R=te.getAbsoluteDistance(u[g+1],o.margin,!0),v=Math.min(v,R))),O.length>1&&o.limit&&(S&&g>0&&(R=te.getAbsoluteDistance(u[g-1],o.limit,!1),v=Math.min(v,R)),D&&g<O.length-1&&(R=te.getAbsoluteDistance(u[g+1],o.limit,!0),v=Math.max(v,R))),o.padding&&(g===0&&(R=te.getAbsoluteDistance(0,o.padding[0],!1),v=Math.max(v,R)),g===O.length-1&&(R=te.getAbsoluteDistance(100,o.padding[1],!0),v=Math.min(v,R))),se||(v=te.getStep(v)),!((v=M(v))===u[g]&&!L)&&v}function Er(u,g){var v=o.ort;return(v?g:u)+", "+(v?u:g)}function Ms(u,g,v,S,D){var L=v.slice(),se=S[0],R=o.events.smoothSteps,Le=[!u,u],Me=[u,!u];S=S.slice(),u&&S.reverse(),S.length>1?S.forEach(function(Ae,xe){var Ve=Mn(L,Ae,L[Ae]+g,Le[xe],Me[xe],!1,R);Ve===!1?g=0:(g=Ve-L[Ae],L[Ae]=Ve)}):Le=Me=[!0];var we=!1;S.forEach(function(Ae,xe){we=It(Ae,v[Ae]+g,Le[xe],Me[xe],!1,R)||we}),we&&(S.forEach(function(Ae){Fe("update",Ae),Fe("slide",Ae)}),D!=null&&Fe("drag",se))}function Os(u,g){return o.dir?100-u-g:u}function vl(u,g){Ne[u]=g,gt[u]=te.fromStepping(g);var v="translate("+Er(Os(g,0)-Go+"%","0")+")";O[u].style[o.transformRule]=v,ks(u),ks(u+1)}function Sr(){Je.forEach(function(u){var g=Ne[u]>50?-1:1,v=3+(O.length+g*u);O[u].style.zIndex=String(v)})}function It(u,g,v,S,D,L){return D||(g=Mn(Ne,u,g,v,S,!1,L)),g!==!1&&(vl(u,g),!0)}function ks(u){if(J[u]){var g=0,v=100;u!==0&&(g=Ne[u-1]),u!==J.length-1&&(v=Ne[u]);var S=v-g,D="translate("+Er(Os(g,S)+"%","0")+")",L="scale("+Er(S/100,"1")+")";J[u].style[o.transformRule]=D+" "+L}}function Fs(u,g){return u===null||u===!1||u===void 0?Ne[g]:(typeof u=="number"&&(u=String(u)),(u=o.format.from(u))!==!1&&(u=te.toStepping(u)),u===!1||isNaN(u)?Ne[g]:u)}function On(u,g,v){var S=_(u),D=Ne[0]===void 0;g=g===void 0||g,o.animate&&!D&&y(Ue,o.cssClasses.tap,o.animationDuration),Je.forEach(function(R){It(R,Fs(S[R],R),!0,!1,v)});var L=Je.length===1?0:1;if(D&&te.hasNoSize()&&(v=!0,Ne[0]=0,Je.length>1)){var se=100/(Je.length-1);Je.forEach(function(R){Ne[R]=R*se})}for(;L<Je.length;++L)Je.forEach(function(R){It(R,Ne[R],!0,!0,v)});Sr(),Je.forEach(function(R){Fe("update",R),S[R]!==null&&g&&Fe("set",R)})}function bl(u){On(o.start,u)}function yl(u,g,v,S){if(!((u=Number(u))>=0&&u<Je.length))throw new Error("noUiSlider: invalid handle number, got: "+u);It(u,Fs(g,u),!0,!0,S),Fe("update",u),v&&Fe("set",u)}function Ls(u){if(u===void 0&&(u=!1),u)return gt.length===1?gt[0]:gt.slice(0);var g=gt.map(o.format.to);return g.length===1?g[0]:g}function xl(){for(cn(Ce.aria),cn(Ce.tooltips),Object.keys(o.cssClasses).forEach(function(u){K(Ue,o.cssClasses[u])});Ue.firstChild;)Ue.removeChild(Ue.firstChild);delete Ue.noUiSlider}function Is(u){var g=Ne[u],v=te.getNearbySteps(g),S=gt[u],D=v.thisStep.step,L=null;if(o.snap)return[S-v.stepBefore.startValue||null,v.stepAfter.startValue-S||null];D!==!1&&S+D>v.stepAfter.startValue&&(D=v.stepAfter.startValue-S),L=S>v.thisStep.startValue?v.thisStep.step:v.stepBefore.step!==!1&&S-v.stepBefore.highestStep,g===100?D=null:g===0&&(L=null);var se=te.countStepDecimals();return D!==null&&D!==!1&&(D=Number(D.toFixed(se))),L!==null&&L!==!1&&(L=Number(L.toFixed(se))),[L,D]}function _l(){return Je.map(Is)}function Cl(u,g){var v=Ls(),S=["margin","limit","padding","range","animate","snap","step","format","pips","tooltips"];S.forEach(function(L){u[L]!==void 0&&(T[L]=u[L])});var D=Z(T);S.forEach(function(L){u[L]!==void 0&&(o[L]=D[L])}),te=D.spectrum,o.margin=D.margin,o.limit=D.limit,o.padding=D.padding,o.pips?xr(o.pips):yr(),o.tooltips?Ps():br(),Ne=[],On(l(u.start)?u.start:v,g)}function wl(){H=nl(Ue),tl(o.connect,H),gl(o.events),On(o.start),o.pips&&xr(o.pips),o.tooltips&&Ps(),sl()}wl();var kn={destroy:xl,steps:_l,on:wr,off:cn,get:Ls,set:On,setHandle:yl,reset:bl,__moveHandles:function(u,g,v){Ms(u,g,Ne,v)},options:T,updateOptions:Cl,target:Ue,removePips:yr,removeTooltips:br,getPositions:function(){return Ne.slice()},getTooltips:function(){return ge},getOrigins:function(){return O},pips:xr};return kn}function ye(c,o){if(!c||!c.nodeName)throw new Error("noUiSlider: create requires a single element, got: "+c);if(c.noUiSlider)throw new Error("noUiSlider: Slider was already initialized.");var T=ae(c,Z(o),o);return c.noUiSlider=T,T}var be={__spectrum:ve,cssClasses:Ee,create:ye};n.create=ye,n.cssClasses=Ee,n.default=be,Object.defineProperty(n,"__esModule",{value:!0})})(t)}));function Mi(e,t){if(!Array.isArray(e)||!Array.isArray(t))return!1;const n=t.slice().sort();return e.length===t.length&&e.slice().sort().every(function(r,s){return r===n[s]})}var Oi={name:"Slider",emits:["input","update:modelValue","start","slide","drag","update","change","set","end"],props:{value:{validator:function(e){return t=>typeof t=="number"||t instanceof Array||t==null||t===!1},required:!1},modelValue:{validator:function(e){return t=>typeof t=="number"||t instanceof Array||t==null||t===!1},required:!1},id:{type:[String,Number],required:!1},disabled:{type:Boolean,required:!1,default:!1},min:{type:Number,required:!1,default:0},max:{type:Number,required:!1,default:100},step:{type:Number,required:!1,default:1},orientation:{type:String,required:!1,default:"horizontal"},direction:{type:String,required:!1,default:"ltr"},tooltips:{type:Boolean,required:!1,default:!0},options:{type:Object,required:!1,default:()=>({})},merge:{type:Number,required:!1,default:-1},format:{type:[Object,Function,Boolean],required:!1,default:null},classes:{type:Object,required:!1,default:()=>({})},showTooltip:{type:String,required:!1,default:"always"},tooltipPosition:{type:String,required:!1,default:null},lazy:{type:Boolean,required:!1,default:!0},ariaLabelledby:{type:String,required:!1,default:void 0},aria:{required:!1,type:Object,default:()=>({})}},setup(e,t){const n=function(l,a,f){const{value:p,modelValue:m,min:b}=Vn(l);let y=m&&m.value!==void 0?m:p;const M=Jt(y.value);if(Hn(y.value)&&(y=Jt(b.value)),Array.isArray(y.value)&&y.value.length==0)throw new Error("Slider v-model must not be an empty array");return{value:y,initialValue:M}}(e),r=function(l,a,f){const{classes:p,showTooltip:m,tooltipPosition:b,orientation:y}=Vn(l),M=Pt(()=>({target:"slider-target",focused:"slider-focused",tooltipFocus:"slider-tooltip-focus",tooltipDrag:"slider-tooltip-drag",ltr:"slider-ltr",rtl:"slider-rtl",horizontal:"slider-horizontal",vertical:"slider-vertical",textDirectionRtl:"slider-txt-dir-rtl",textDirectionLtr:"slider-txt-dir-ltr",base:"slider-base",connects:"slider-connects",connect:"slider-connect",origin:"slider-origin",handle:"slider-handle",handleLower:"slider-handle-lower",handleUpper:"slider-handle-upper",touchArea:"slider-touch-area",tooltip:"slider-tooltip",tooltipTop:"slider-tooltip-top",tooltipBottom:"slider-tooltip-bottom",tooltipLeft:"slider-tooltip-left",tooltipRight:"slider-tooltip-right",tooltipHidden:"slider-tooltip-hidden",active:"slider-active",draggable:"slider-draggable",tap:"slider-state-tap",drag:"slider-state-drag",pips:"slider-pips",pipsHorizontal:"slider-pips-horizontal",pipsVertical:"slider-pips-vertical",marker:"slider-marker",markerHorizontal:"slider-marker-horizontal",markerVertical:"slider-marker-vertical",markerNormal:"slider-marker-normal",markerLarge:"slider-marker-large",markerSub:"slider-marker-sub",value:"slider-value",valueHorizontal:"slider-value-horizontal",valueVertical:"slider-value-vertical",valueNormal:"slider-value-normal",valueLarge:"slider-value-large",valueSub:"slider-value-sub",...p.value}));return{classList:Pt(()=>{const _={...M.value};return Object.keys(_).forEach(C=>{_[C]=Array.isArray(_[C])?_[C].filter(k=>k!==null).join(" "):_[C]}),m.value!=="always"&&(_.target+=` ${m.value==="drag"?_.tooltipDrag:_.tooltipFocus}`),y.value==="horizontal"&&(_.tooltip+=b.value==="bottom"?` ${_.tooltipBottom}`:` ${_.tooltipTop}`),y.value==="vertical"&&(_.tooltip+=b.value==="right"?` ${_.tooltipRight}`:` ${_.tooltipLeft}`),_})}}(e),s=function(l,a,f){const{format:p,step:m}=Vn(l),b=f.value,y=f.classList,M=Pt(()=>p&&p.value?typeof p.value=="function"?{to:p.value}:Ni({...p.value}):Ni({decimals:m.value>=0?0:2})),_=Pt(()=>Array.isArray(b.value)?b.value.map(C=>M.value):M.value);return{tooltipFormat:M,tooltipsFormat:_,tooltipsMerge:(C,k,K)=>{var q=getComputedStyle(C).direction==="rtl",ue=C.noUiSlider.options.direction==="rtl",z=C.noUiSlider.options.orientation==="vertical",X=C.noUiSlider.getTooltips(),de=C.noUiSlider.getOrigins();X.forEach(function(ie,j){ie&&de[j].appendChild(ie)}),C.noUiSlider.on("update",function(ie,j,U,ne,G){var V=[[]],ce=[[]],me=[[]],ee=0;X[0]&&(V[0][0]=0,ce[0][0]=G[0],me[0][0]=M.value.to(parseFloat(ie[0])));for(var le=1;le<ie.length;le++)(!X[le]||ie[le]-ie[le-1]>k)&&(V[++ee]=[],me[ee]=[],ce[ee]=[]),X[le]&&(V[ee].push(le),me[ee].push(M.value.to(parseFloat(ie[le]))),ce[ee].push(G[le]));V.forEach(function(ve,fe){for(var Ee=ve.length,Ce=0;Ce<Ee;Ce++){var Oe=ve[Ce];if(Ce===Ee-1){var ke=0;ce[fe].forEach(function(B){ke+=1e3-B});var at=z?"bottom":"right",pt=ue?0:Ee-1,De=1e3-ce[fe][pt];ke=(q&&!z?100:0)+ke/Ee-De,X[Oe].innerHTML=me[fe].join(K),X[Oe].style.display="block",X[Oe].style[at]=ke+"%",y.value.tooltipHidden.split(" ").forEach(B=>{X[Oe].classList.contains(B)&&X[Oe].classList.remove(B)})}else X[Oe].style.display="none",y.value.tooltipHidden.split(" ").forEach(B=>{X[Oe].classList.add(B)})}})})}}}(e,0,{value:n.value,classList:r.classList}),i=function(l,a,f){const{orientation:p,direction:m,tooltips:b,step:y,min:M,max:_,merge:C,id:k,disabled:K,options:q,classes:ue,format:z,lazy:X,ariaLabelledby:de,aria:ie}=Vn(l),j=f.value,U=f.initialValue,ne=f.tooltipsFormat,G=f.tooltipsMerge,V=f.tooltipFormat,ce=f.classList,me=Jt(null),ee=Jt(null),le=Jt(!1),ve=Pt(()=>{let B={cssPrefix:"",cssClasses:ce.value,orientation:p.value,direction:m.value,tooltips:!!b.value&&ne.value,connect:"lower",start:Hn(j.value)?M.value:j.value,range:{min:M.value,max:_.value}};if(y.value>0&&(B.step=y.value),Array.isArray(j.value)&&(B.connect=!0),de&&de.value||ie&&Object.keys(ie.value).length){let _e=Array.isArray(j.value)?j.value:[j.value];B.handleAttributes=_e.map(on=>Object.assign({},ie.value,de&&de.value?{"aria-labelledby":de.value}:{}))}return z.value&&(B.ariaFormat=V.value),B}),fe=Pt(()=>{let B={id:k&&k.value?k.value:void 0};return K.value&&(B.disabled=!0),B}),Ee=Pt(()=>Array.isArray(j.value)),Ce=()=>{let B=ee.value.get();return Array.isArray(B)?B.map(_e=>parseFloat(_e)):parseFloat(B)},Oe=function(B){let _e=!(arguments.length>1&&arguments[1]!==void 0)||arguments[1];ee.value.set(B,_e)},ke=B=>{a.emit("input",B),a.emit("update:modelValue",B),a.emit("update",B)},at=()=>{ee.value=Nu.create(me.value,Object.assign({},ve.value,q.value)),b.value&&Ee.value&&C.value>=0&&G(me.value,C.value," - "),ee.value.on("set",()=>{const B=Ce();a.emit("change",B),a.emit("set",B),X.value&&ke(B)}),ee.value.on("update",()=>{if(!le.value)return;const B=Ce();Ee.value&&Mi(j.value,B)||!Ee.value&&j.value==B?a.emit("update",B):X.value||ke(B)}),ee.value.on("start",()=>{a.emit("start",Ce())}),ee.value.on("end",()=>{a.emit("end",Ce())}),ee.value.on("slide",()=>{a.emit("slide",Ce())}),ee.value.on("drag",()=>{a.emit("drag",Ce())}),me.value.querySelectorAll("[data-handle]").forEach(B=>{B.onblur=()=>{me.value&&ce.value.focused.split(" ").forEach(_e=>{me.value.classList.remove(_e)})},B.onfocus=()=>{ce.value.focused.split(" ").forEach(_e=>{me.value.classList.add(_e)})}}),le.value=!0},pt=()=>{ee.value.off(),ee.value.destroy(),ee.value=null},De=(B,_e)=>{le.value=!1,pt(),at()};return ds(at),ps(pt),ze(Ee,De,{immediate:!1}),ze(M,De,{immediate:!1}),ze(_,De,{immediate:!1}),ze(y,De,{immediate:!1}),ze(p,De,{immediate:!1}),ze(m,De,{immediate:!1}),ze(b,De,{immediate:!1}),ze(C,De,{immediate:!1}),ze(z,De,{immediate:!1,deep:!0}),ze(q,De,{immediate:!1,deep:!0}),ze(ue,De,{immediate:!1,deep:!0}),ze(j,(B,_e)=>{_e&&(typeof _e=="object"&&typeof B=="object"&&B&&Object.keys(_e)>Object.keys(B)||typeof _e=="object"&&typeof B!="object"||Hn(B))&&De()},{immediate:!1}),ze(j,B=>{if(Hn(B))return void Oe(M.value,!1);let _e=Ce();Ee.value&&!Array.isArray(_e)&&(_e=[_e]),(Ee.value&&!Mi(B,_e)||!Ee.value&&B!=_e)&&Oe(B,!1)},{deep:!0}),{slider:me,slider$:ee,isRange:Ee,sliderProps:fe,init:at,destroy:pt,refresh:De,update:Oe,reset:()=>{ke(U.value)}}}(e,t,{value:n.value,initialValue:n.initialValue,tooltipFormat:s.tooltipFormat,tooltipsFormat:s.tooltipsFormat,tooltipsMerge:s.tooltipsMerge,classList:r.classList});return{...r,...s,...i}}};Oi.render=function(e,t,n,r,s,i){return fr(),No("div",ko(e.sliderProps,{ref:"slider"}),null,16)},Oi.__file="src/Slider.vue";const Xo=function(){return document.ontouchstart!==null?"click":"touchstart"},er="__vue_click_away__",Zo=function(e,t,n){Qo(e);let r=n.context,s=t.value,i=!1;setTimeout(function(){i=!0},0),e[er]=function(l){if((!e||!e.contains(l.target))&&s&&i&&typeof s=="function")return s.call(r,l)},document.addEventListener(Xo(),e[er],!1)},Qo=function(e){document.removeEventListener(Xo(),e[er],!1),delete e[er]},Mu=function(e,t,n){t.value!==t.oldValue&&Zo(e,t,n)},af={install:function(e){e.directive("click-away",Ou)}},Ou={mounted:Zo,updated:Mu,unmounted:Qo};function cf(e){return{all:e=e||new Map,on:function(t,n){var r=e.get(t);r?r.push(n):e.set(t,[n])},off:function(t,n){var r=e.get(t);r&&(n?r.splice(r.indexOf(n)>>>0,1):e.set(t,[]))},emit:function(t,n){var r=e.get(t);r&&r.slice().map(function(s){s(n)}),(r=e.get("*"))&&r.slice().map(function(s){s(t,n)})}}}export{af as $,zn as A,fa as B,Qi as C,sr as D,Tn as E,Ku as F,ku as G,gc as H,rt as I,is as J,Bu as K,Ge as L,zu as M,Hu as N,mc as O,Il as P,Ru as Q,Ju as R,lf as S,Ro as T,Oi as U,$u as V,tf as W,Vn as X,Qu as Y,of as Z,bu as _,Wu as a,cf as a0,ef as a1,Gu as a2,Uu as a3,Gr as a4,dt as a5,Sc as a6,Iu as a7,tc as a8,Fu as a9,pe as aa,Xi as ab,Ua as ac,Da as ad,Zu as ae,ja as af,Re as ag,ur as ah,kt as ai,Ra as aj,xs as b,Pt as c,ju as d,ds as e,vo as f,Ul as g,fr as h,Mo as i,Vu as j,No as k,Xu as l,ko as m,xa as n,Lu as o,qu as p,Pa as q,Jt as r,qe as s,Du as t,pa as u,sf as v,ze as w,rf as x,nf as y,Yu as z};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
