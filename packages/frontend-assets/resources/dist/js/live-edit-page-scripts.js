/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/live-edit/live-edit-page-scripts.js":
/*!**************************************************************!*\
  !*** ./resources/assets/live-edit/live-edit-page-scripts.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\r\n\r\n\r\n\r\n\r\nif(window.self !== window.top) {\r\n\r\n    mw.require('liveedit.css');\r\n    mw.require('moveable.js');\r\n    //mw.require('options.js');\r\n\r\n\r\n     mw.lib.require('tinymce');\r\n\r\n\r\n    mw.liveEditSaveService = {\r\n        grammarlyFix: function (data) {\r\n\r\n            mw.$(\"grammarly-btn\", data).remove();\r\n            mw.$(\"grammarly-card\", data).remove();\r\n            mw.$(\"g.gr_\", data).each(function () {\r\n                mw.$(this).replaceWith(this.innerHTML);\r\n            });\r\n            mw.$(\"[data-gramm_id]\", data).removeAttr('data-gramm_id');\r\n            mw.$(\"[data-gramm]\", data).removeAttr('data-gramm');\r\n            mw.$(\"[data-gramm_id]\", data).removeAttr('data-gramm_id');\r\n            mw.$(\"grammarly-card\", data).remove();\r\n            mw.$(\"grammarly-inline-cards\", data).remove();\r\n            mw.$(\"grammarly-popups\", data).remove();\r\n            mw.$(\"grammarly-extension\", data).remove();\r\n            return data;\r\n        },\r\n        saving: false,\r\n        coreSave: function (data) {\r\n            if (!data) return false;\r\n            $.each(data, function () {\r\n                var body = mw.tools.parseHtml(this.html).body;\r\n                mw.liveEditSaveService.grammarlyFix(body);\r\n                mw.liveEditSaveService.animationsClearFix(body);\r\n                this.html = body.innerHTML;\r\n            });\r\n            mw.liveEditSaveService.saving = true;\r\n\r\n            /************  START base64  ************/\r\n            data.from_url = window.location.href;\r\n\r\n\r\n            if(typeof mw.liveEditIframeData !== 'undefined'){\r\n                //sometimes the url can be modified by pop state, so we use iframedata original url\r\n                if(typeof mw.liveEditIframeData.content_link !== 'undefined'){\r\n                    data.from_url =  mw.liveEditIframeData.content_link;\r\n                }\r\n\r\n                //sometimes the lang can be modified from another tab, so we use iframedata original lang\r\n                if(typeof mw.liveEditIframeData.multiLanguageCurrentLanguage !== 'undefined'){\r\n                    data.lang = mw.liveEditIframeData.multiLanguageCurrentLanguage;\r\n                 }\r\n            }\r\n\r\n\r\n            data = JSON.stringify(data);\r\n            data = btoa(encodeURIComponent(data).replace(/%([0-9A-F]{2})/g,\r\n                function toSolidBytes(match, p1) {\r\n                    return String.fromCharCode('0x' + p1);\r\n                }));\r\n            data = {data_base64: data};\r\n            /************  END base64  ************/\r\n\r\n            var xhr = mw.ajax({\r\n                type: 'POST',\r\n                url: mw.settings.api_url + 'save_edit',\r\n                data: data,\r\n                dataType: \"json\",\r\n                success: function (saved_data) {\r\n                    if (saved_data && saved_data.new_page_url && !mw.liveEditSaveService.DraftSaving) {\r\n                        window.mw.parent().askusertostay = false;\r\n                        window.mw.askusertostay = false;\r\n                        window.location.href = saved_data.new_page_url;\r\n\r\n                    }\r\n                }\r\n            });\r\n\r\n            xhr.always(function () {\r\n                mw.liveEditSaveService.saving = false;\r\n            });\r\n            return xhr;\r\n        },\r\n        parseContent: function (root) {\r\n            root = root || document.body;\r\n            var doc = mw.tools.parseHtml(root.innerHTML);\r\n            mw.$('.element-current', doc).removeClass('element-current');\r\n            mw.$('.mce-content-body', doc).removeClass('mce-content-body');\r\n            mw.$('.mce-content-focus', doc).removeClass('mce-content-focus');\r\n            mw.$('.element-active', doc).removeClass('element-active');\r\n            mw.$('.disable-resize', doc).removeClass('disable-resize');\r\n            mw.$('.mw-module-drag-clone', doc).removeClass('mw-module-drag-clone');\r\n            mw.$('.ui-draggable', doc).removeClass('ui-draggable');\r\n            mw.$('.ui-draggable-handle', doc).removeClass('ui-draggable-handle');\r\n            mw.$('.mt-ready', doc).removeClass('mt-ready');\r\n            mw.$('.mw-webkit-drag-hover-binded', doc).removeClass('mw-webkit-drag-hover-binded');\r\n            mw.$('.module-cat-toggle-Modules', doc).removeClass('module-cat-toggle-Modules');\r\n            mw.$('.mw-module-drag-clone', doc).removeClass('mw-module-drag-clone');\r\n            mw.$('.mce-edit-focus', doc).removeClass('mce-edit-focus');\r\n            mw.$('.mce-edit-body', doc).removeClass('mce-edit-body');\r\n            mw.$('[data-mce-style]', doc).removeAttr('data-mce-style');\r\n            mw.$('[mce-content-body]', doc).removeAttr('mce-content-body');\r\n            mw.$('[data-mce-style]', doc).removeAttr('data-mce-style');\r\n            mw.$('[data-mce-selected]', doc).removeAttr('data-mce-selected');\r\n            mw.$('[data-mce-href]', doc).removeAttr('data-mce-href');\r\n            mw.$('-module', doc).removeClass('-module');\r\n            mw.$('.empty-element', doc).remove();\r\n            mw.$('.empty-element', doc).remove();\r\n            mw.$('[data-mce-bogus]', doc).remove();\r\n            mw.$('.edit .ui-resizable-handle', doc).remove();\r\n            mw.$('script', doc).remove();\r\n            mw.$('.moveable-control-box', doc).remove();\r\n\r\n\r\n            //var doc = mw.$(doc).find('script').remove();\r\n\r\n            mw.tools.classNamespaceDelete('all', 'ui-', doc, 'starts');\r\n            mw.$(\"[contenteditable]\", doc).removeAttr(\"contenteditable\");\r\n            var all = doc.querySelectorAll('[contenteditable]'),\r\n                l = all.length,\r\n                i = 0;\r\n            for (; i < l; i++) {\r\n                all[i].removeAttribute('contenteditable');\r\n            }\r\n            var all = doc.querySelectorAll('.module'),\r\n                l = all.length,\r\n                i = 0;\r\n            for (; i < l; i++) {\r\n                if (all[i].querySelector('.edit') === null) {\r\n                    all[i].innerHTML = '';\r\n                }\r\n            }\r\n            return doc;\r\n        },\r\n        htmlAttrValidate: function (edits) {\r\n            var final = [];\r\n            $.each(edits, function () {\r\n                var html = this.outerHTML;\r\n                html = html.replace(/url\\(&quot;/g, \"url('\");\r\n                html = html.replace(/jpg&quot;/g, \"jpg'\");\r\n                html = html.replace(/jpeg&quot;/g, \"jpeg'\");\r\n                html = html.replace(/png&quot;/g, \"png'\");\r\n                html = html.replace(/gif&quot;/g, \"gif'\");\r\n                final.push($(html)[0]);\r\n            })\r\n            return final;\r\n        },\r\n        cleanUnwantedTags: function (body) {\r\n\r\n\r\n            mw.$('.mw-skip-and-remove,script', body).remove();\r\n            return body;\r\n        },\r\n        animationsClearFix: function (body) {\r\n            mw.$('[class*=\"animate__\"]').each(function () {\r\n                mw.tools.classNamespaceDelete(this, 'animate__');\r\n            });\r\n            return body;\r\n        },\r\n        collectData: function (edits) {\r\n            mw.$(edits).each(function () {\r\n                mw.$('meta', this).remove();\r\n                $('.mw-le-spacer', this).empty().removeAttr('data-resizable').removeAttr('style')\r\n            });\r\n\r\n            edits = this.htmlAttrValidate(edits);\r\n            var l = edits.length,\r\n                i = 0,\r\n                helper = {},\r\n                master = {};\r\n            if (l > 0) {\r\n                for (; i < l; i++) {\r\n                    helper.item = edits[i];\r\n                    var rel = mw.tools.mwattr(helper.item, 'rel');\r\n                    if (!rel) {\r\n                        mw.$(helper.item).removeClass('changed');\r\n                        mw.tools.foreachParents(helper.item, function (loop) {\r\n                            var cls = this.className;\r\n                            var rel = mw.tools.mwattr(this, 'rel');\r\n                            if (mw.tools.hasClass(cls, 'edit') && mw.tools.hasClass(cls, 'changed') && (!!rel)) {\r\n                                helper.item = this;\r\n                                mw.tools.stopLoop(loop);\r\n                            }\r\n                        });\r\n                    }\r\n                    var rel = mw.tools.mwattr(helper.item, 'rel');\r\n                    if (!rel) {\r\n                        var field = !!helper.item.id ? '#' + helper.item.id : '';\r\n                        console.warn('Skipped save: .edit' + field + ' element does not have rel attribute.');\r\n                        continue;\r\n                    }\r\n                    mw.$(helper.item).removeClass('changed orig_changed');\r\n                    mw.$(helper.item).removeClass('module-over');\r\n                    mw.$('.mw-le-ghost-layout', helper.item).remove();\r\n                    mw.$('#mw-non-existing-temp-element-holder', helper.item).remove();\r\n\r\n                    mw.$('.module-over', helper.item).each(function () {\r\n                        mw.$(this).removeClass('module-over');\r\n                    });\r\n\r\n\r\n                    mw.$('.element[data-mwplaceholder]', helper.item).each(function () {\r\n                        var isEmpty = !this.innerHTML.trim();\r\n                        if (!isEmpty) {\r\n                            mw.$(this).removeAttr('data-mwplaceholder');\r\n                        }\r\n\r\n                    });\r\n                    mw.$('.element.lipsum', helper.item).each(function () {\r\n                        mw.$(this).removeClass('lipsum');\r\n                    });\r\n\r\n                    mw.$('[data-mw-live-edithover]', helper.item).each(function () {\r\n                        mw.$(this).removeAttr('data-mw-live-edithover');\r\n                    });\r\n\r\n                    mw.$('[data-mw-temp-option-save]', helper.item).each(function () {\r\n                        mw.$(this).removeAttr('data-mw-temp-option-save');\r\n                    });\r\n                    mw.$('[class]', helper.item).each(function () {\r\n                        var cls = this.getAttribute(\"class\");\r\n                        if (typeof cls === 'string') {\r\n                            cls = cls.trim();\r\n                        }\r\n                        if (!cls) {\r\n                            this.removeAttribute(\"class\");\r\n                        }\r\n                    });\r\n                    var content = mw.liveEditSaveService.cleanUnwantedTags(helper.item).innerHTML;\r\n                    var attr_obj = {};\r\n                    var attrs = helper.item.attributes;\r\n                    if (attrs.length > 0) {\r\n                        var ai = 0,\r\n                            al = attrs.length;\r\n                        for (; ai < al; ai++) {\r\n                            attr_obj[attrs[ai].nodeName] = attrs[ai].nodeValue;\r\n                        }\r\n                    }\r\n                    var obj = {\r\n                        attributes: attr_obj,\r\n                        html: content\r\n                    };\r\n                    var objdata = \"field_data_\" + i;\r\n                    master[objdata] = obj;\r\n                }\r\n            }\r\n            return master;\r\n        },\r\n        getData: function (root) {\r\n            var body = mw.liveEditSaveService.parseContent(root).body,\r\n                edits = body.querySelectorAll('.edit.changed');\r\n            return mw.liveEditSaveService.collectData(edits);\r\n        },\r\n\r\n        saveDisabled: false,\r\n        draftDisabled: false,\r\n        save: function (data, success, fail) {\r\n            mw.trigger('beforeSaveStart', data);\r\n            // todo:\r\n\r\n            if (mw.top().app) {\r\n                if (mw.top().app && mw.top().app.cssEditor) {\r\n\r\n                    mw.top().app.cssEditor.publishIfChanged();\r\n                }\r\n            }\r\n\r\n            if (mw.top().app) {\r\n                if (mw.top().app && mw.top().options) {\r\n\r\n                    mw.top().options.publishTempOptions(document);\r\n                }\r\n            }\r\n            if (mw.liveEditSaveService.saveDisabled) {\r\n                return false;\r\n            }\r\n            if (!data) {\r\n                var body = mw.liveEditSaveService.parseContent().body,\r\n                    edits = body.querySelectorAll('.edit.changed');\r\n                data = mw.liveEditSaveService.collectData(edits);\r\n            }\r\n\r\n            var animations = (mw.__pageAnimations || []).filter(function (item) {\r\n                return item.animation !== 'none';\r\n            });\r\n\r\n            if (animations && animations.length > 0) {\r\n                var options = {\r\n                    group: 'template',\r\n                    key: 'animations-global',\r\n                    value: JSON.stringify(animations)\r\n                };\r\n\r\n                mw.top().options.saveOption(options);\r\n                // await new Promise(resolve =>  {\r\n                //     mw.options.saveOption(options, function(){\r\n                //         resolve();\r\n                //     });\r\n                // });\r\n            }\r\n\r\n\r\n            if (mw.tools.isEmptyObject(data)) {\r\n                if (success) {\r\n                    success.call({})\r\n                }\r\n                return false;\r\n            }\r\n\r\n\r\n            mw._liveeditData = data;\r\n\r\n            mw.trigger('saveStart', mw._liveeditData);\r\n\r\n            var xhr = mw.liveEditSaveService.coreSave(mw._liveeditData);\r\n            xhr.error(function (sdata) {\r\n\r\n                if (xhr.status == 403) {\r\n                    var modal = mw.dialog({\r\n                        id: 'save_content_error_iframe_modal',\r\n                        html: \"<iframe id='save_content_error_iframe' style='overflow-x:hidden;overflow-y:auto;' class='mw-modal-frame' ></iframe>\",\r\n                        width: $(window).width() - 90,\r\n                        height: $(window).height() - 90\r\n                    });\r\n\r\n                    mw.askusertostay = false;\r\n\r\n                    mw.$(\"#save_content_error_iframe\").ready(function () {\r\n                        var doc = document.getElementById('save_content_error_iframe').contentWindow.document;\r\n                        doc.open();\r\n                        doc.write(xhr.responseText);\r\n                        doc.close();\r\n                        var save_content_error_iframe_reloads = 0;\r\n                        doc = document.getElementById('save_content_error_iframe').contentWindow.document;\r\n\r\n                        mw.$(\"#save_content_error_iframe\").load(function () {\r\n                            // cloudflare captcha\r\n                            var is_cf = mw.$('.challenge-form', doc).length;\r\n                            save_content_error_iframe_reloads++;\r\n\r\n                            if (is_cf && save_content_error_iframe_reloads == 2) {\r\n                                setTimeout(function () {\r\n                                    mw.askusertostay = false;\r\n                                    mw.$('#save_content_error_iframe_modal').remove();\r\n                                }, 150);\r\n\r\n                            }\r\n                        });\r\n\r\n                    });\r\n                }\r\n                if (fail) {\r\n                    fail.call(sdata)\r\n                }\r\n            });\r\n            xhr.success(function (sdata) {\r\n                mw.$('.edit.changed').removeClass('changed');\r\n                mw.$('.orig_changed').removeClass('orig_changed');\r\n                if (document.querySelector('.edit.changed') !== null) {\r\n                    mw.liveEditSaveService.save();\r\n                } else {\r\n                    mw.askusertostay = false;\r\n                    mw.trigger('saveEnd', sdata);\r\n                }\r\n                if (success) {\r\n                    success.call(sdata)\r\n                }\r\n\r\n            });\r\n            xhr.fail(function (jqXHR, textStatus, errorThrown) {\r\n                mw.trigger('saveFailed', textStatus, errorThrown);\r\n                if (fail) {\r\n                    fail.call(sdata)\r\n                }\r\n            });\r\n            return xhr;\r\n        },\r\n\r\n    };\r\n\r\n    mw.saveLiveEdit = async () => {\r\n        return new Promise((resolve) => {\r\n            mw.liveEditSaveService.save(undefined, () => resolve(true), () => resolve(false));\r\n        })\r\n    };\r\n\r\n    mw.top().app.save = async () => {\r\n\r\n        return await mw.saveLiveEdit()\r\n    };\r\n\r\n\r\n    addEventListener('load', () => {\r\n\r\n        window.addEventListener('keydown', function (event) {\r\n            mw.top().app.canvas.dispatch('iframeKeyDown', {event})\r\n        });\r\n\r\n\r\n        mw.$('span.mw-powered-by').on(\"click\", function (e) {\r\n            mw.top().tools.open_global_module_settings_modal('white_label/admin', 'mw-powered-by');\r\n            return false;\r\n        });\r\n\r\n\r\n        const _handleEmptyEditFields = function () {\r\n\r\n            function manageNode(node) {\r\n                const isEmptyLike = !node.innerHTML.trim();\r\n\r\n                if (isEmptyLike && node.innerHTML.trim() === node.textContent.trim()) {\r\n                    // mw.element(node).append(`<p class=\"element\" data-mwplaceholder=\"${mw.lang(`This is sample text for your page`)}\"></p>`);\r\n                } else {\r\n                    node.classList[isEmptyLike ? 'add' : 'remove']('mw-le-empty-element');\r\n                }\r\n            }\r\n\r\n            document.querySelectorAll('.edit').forEach(function (node) {\r\n                if (!node.__$$_handleEmptyEditFields) {\r\n                    node.__$$_handleEmptyEditFields = true;\r\n                    manageNode(node);\r\n                    node.addEventListener('input', function () {\r\n                        manageNode(this);\r\n                    });\r\n                }\r\n            });\r\n\r\n            mw.top().app.on('editChanged', edit => {\r\n                setTimeout(() => manageNode(edit));\r\n            })\r\n        };\r\n\r\n        _handleEmptyEditFields()\r\n\r\n\r\n    });\r\n\r\n\r\n    let _beforeUnload = null;\r\n\r\n    mw.top().app.isNavigating = () => {\r\n        return !!_beforeUnload && _beforeUnload.returnValue && _beforeUnload.defaultPrevented === true\r\n    };\r\n\r\n\r\n    self.onbeforeunload = function (event) {\r\n        _beforeUnload = event;\r\n\r\n        // prevent user from leaving if there are unsaved changes\r\n         var liveEditIframe = self;\r\n\r\n       // var liveEditIframe = mw.top().app.canvas.getWindow();\r\n\r\n        liveEditIframe.mw.isNavigating = true;\r\n        if( typeof(mw.top) === 'function' && mw.top().app.canvas) {\r\n            mw.top().app.canvas.dispatch('liveEditCanvasBeforeUnload');\r\n        }\r\n\r\n        setTimeout(function (liveEditIframe) {\r\n            if (liveEditIframe) {\r\n                if (liveEditIframe && liveEditIframe.mw) {\r\n                    liveEditIframe.mw.isNavigating = false;\r\n                }\r\n            }\r\n        }, 1, liveEditIframe);\r\n\r\n\r\n        if (liveEditIframe\r\n            && liveEditIframe.mw && liveEditIframe.mw.askusertostay) {\r\n            return true;\r\n        } else {\r\n            if( typeof(mw.top) === 'function' && mw.top().app.canvas) {\r\n                var frame = mw.top().app.canvas.getFrame();\r\n                if (frame && frame.parentElement) {\r\n                    mw.top().spinner({element: frame.parentElement, decorate: true, size: 52}).show()\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    mw.drag = mw.drag || {};\r\n    mw.drag.save = function () {\r\n        return mw.liveEditSaveService.save();\r\n    };\r\n    mw.drag.fix_placeholders = function (isHard, selector) {\r\n        selector = selector || '.edit .row';\r\n\r\n        var more_selectors2 = 'div.col-md';\r\n        var a = mw.top().app.templateSettings.helperClasses.external_grids_col_classes;\r\n        var index;\r\n        for (index = a.length - 1; index >= 0; --index) {\r\n            more_selectors2 += ',div.' + a[index];\r\n        }\r\n        mw.$(selector).each(function () {\r\n            var el = mw.$(this);\r\n            el.children(more_selectors2).each(function () {\r\n                var empty_child = mw.$(this).children('*');\r\n                if (empty_child.length == 0) {\r\n                    mw.$(this).append('<div class=\"element\" id=\"mw-element-' + mw.random() + '\">' + '</div>');\r\n                    var empty_child = mw.$(this).children(\"div.element\");\r\n                }\r\n            });\r\n        });\r\n\r\n    };\r\n\r\n    mw.drag.module_settings = function () {\r\n        var target = mw.top().app.liveEdit.moduleHandle.getTarget();\r\n        return mw.top().app.editor.dispatch('onModuleSettingsRequest', target);\r\n    };\r\n\r\n\r\n    document.documentElement.addEventListener('click', function (event) {\r\n\r\n        var target = event.target;\r\n        var link = mw.tools.firstParentOrCurrentWithTag(target, 'a');\r\n\r\n        if (link && link.href.indexOf('javascript:') !== 0 && !link.isContentEditable) {\r\n            const tmp = document.createElement('a');\r\n            tmp.href = link.href;\r\n            if (tmp.host !== location.host && (!link.target || link.target === '_self')) {\r\n                event.preventDefault();\r\n                open(link.href);\r\n            }\r\n        }\r\n\r\n    })\r\n    document.addEventListener('keydown', function (event) {\r\n        if (event.ctrlKey && event.keyCode === 83) {\r\n            return mw.top().app.editor.dispatch('Ctrl+S', event);\r\n        }\r\n    });\r\n\r\n\r\n    document.body.addEventListener('mouseenter', function (event) {\r\n        $('body').removeClass('mw-live-body-mouse-moved-outside');\r\n\r\n    });\r\n\r\n\r\n    document.body.addEventListener('mouseleave', function (event) {\r\n        $('body').addClass('mw-live-body-mouse-moved-outside');\r\n    });\r\n\r\n}\r\nif (self === top) {\r\n    window.addEventListener(\"load\", (event) => {\r\n        if (window.mwLiveEditIframeBackUrl) {\r\n            // Create the <a> element (button)\r\n            var stickyButton = document.createElement('a');\r\n            stickyButton.id = 'back-to-live-sticky-button';\r\n            stickyButton.textContent = 'Go Live Edit';\r\n            stickyButton.href = window.mwLiveEditIframeBackUrl;\r\n            stickyButton.classList.add('sticky');\r\n\r\n            // Append the button to the document body\r\n            document.body.appendChild(stickyButton);\r\n\r\n            // Apply sticky behavior\r\n            stickyButton.classList.add('sticky');\r\n\r\n\r\n\r\n            // Create and apply the CSS style dynamically\r\n            var style = document.createElement('style');\r\n            style.textContent = `\r\n                    #back-to-live-sticky-button {\r\n                        position: fixed;\r\n                        left: 50%;\r\n                        transform: translateX(-50%);\r\n                        z-index: 1001;\r\n                        transition: top 0.3s;\r\n                        background: #3498db;\r\n                        color: #fff !important;\r\n                        padding: 10px 20px;\r\n                        border-radius: 5px;\r\n                        border-top-left-radius: 0;\r\n                        border-top-right-radius: 0;\r\n                        font-family: Arial, sans-serif;\r\n                        border: none;\r\n                        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n                        cursor: pointer;\r\n                    }\r\n\r\n                    #back-to-live-sticky-button:hover {\r\n                        background: #2980b9;\r\n                    }\r\n\r\n\r\n                    #back-to-live-sticky-button.sticky {\r\n                        top: 0;\r\n                    }\r\n\r\n\r\n\r\n\r\n            `;\r\n\r\n            document.head.appendChild(style);\r\n        }\r\n\r\n        // todo: remove\r\n        document.querySelectorAll('.no-select [class*=\"col\"]').forEach(function(node){\r\n            if(Array.from(node.children).filter(c => c.classList.contains('element')).length) {\r\n                node.classList.add('allow-select')\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://microweber-frontend-assets/./resources/assets/live-edit/live-edit-page-scripts.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/live-edit/live-edit-page-scripts.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;